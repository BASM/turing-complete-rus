kind = sequential
title = "Конфликт данных"
size = [-48, -48, 49, 49]
background = 6
save_solution_as_custom = "Symphony/Allegro/hazard/haz_data"
input_labels = [["Инструкция A"], ["Инструкция B"]]
output_labels = ["Выполнение B"]
add_components = [com_probe_memory_word: -1]
dialogue = [
    (alien, `Следующая оптимизация, которую мы собираемся внедрить, это сделать архитектуру суперскалярной.

Суперскалярность означает, что мы будем выполнять более одной инструкции за такт, в данном случае две.

Однако некоторые пары инструкций не могут выполняться одновременно. В этом уровне входными данными будет пара инструкций, и вы должны вывести 1, если они могут быть выполнены вместе.`),
    (alien, `Есть три основные ситуации, когда мы не можем выполнять две инструкции одновременно:

A: Первая инструкция - это JUMP(переход).

B: Когда вторая инструкция использует регистр назначения первой инструкции. В этом случае мы должны дождаться завершения первой инструкции, прежде чем загружать обновленное значение регистра.

C: Второй конвейер может выполнять только инструкции АЛУ. Существует множество проблем с выполнением вторым конвейером инструкций IO(ввода-вывода), JUMP(прыжка) или RAM(обращения в память) инструкций. Например, у нас есть только один компонент RAM, поэтому мы не можем выполнять загрузку/сохранение по разным адресам в одном такте. Также у нас есть только один компонент ввода, две инструкции "in" в одном такте будут считывать данные только один раз.

`),
]
