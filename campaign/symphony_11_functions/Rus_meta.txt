kind = sequential
no_score = true
title = "Functions"
immutable_program = true
immutable_spec = true
copy_solution_to_level = ["symphony_12_pipelining"]
copy_solution_to_architecture = "Symphony"
no_score = true
size = [-256, -256, 255, 255]
unlocks_pages = ["ASCII encoding"]
(dialogue = [
  (info, `Иногда бывает полезно повторно использовать участок кода. Мы называем эти участки functions(функциями). Чтобы повторно использовать код, нужно перейти к началу функции и вернуться обратно в конце. Мы называем переход к функции call(вызовом) функции, а возвращение из функции return(возвращением).

Но для того чтобы этот участок кода действительно был переиспользуемым, возврат должен уметь возвращаться в разные места, в зависимости от того, откуда мы вызвали функцию.

Мы могли бы сохранить значение счетчика в регистр перед переходом к функции и использовать это значение при возврате. Однако, если так сделать, функция не сможет вызвать другую функцию, так как это перезапишет исходный адрес возврата.

Предположим, функция A вызывает функцию B, которая вызывает функцию C. Когда мы хотим вернуться из C, нам нужен только адрес возврата для B, а в B нужен только адрес для A. В общем, независимо от того, на какую функцию мы смотрим и как они вызывают друг друга, последний добавленный адрес возврата всегда будет первым, который нам снова понадобится. Это именно то поведение, которое обеспечивает стек.
`),
  (info, `В этом уровне в ваш список инструкций добавлены инструкции "call"(вызов функции) и "ret"(возврат). Обе эти инструкции являются сложными синонимами.

"call" используется для входа в функцию. Он помещает адрес следующей инструкции в стек (читая счетчик и добавляя смещение). Затем он переходит к началу функции.

"ret" используется для возврата из функции. Он извлекает адрес возврата из стека и переходит к нему.`),
  (info, `Так как функции, вероятно, изменяют значения регистров, мы можем помещать значения в стек, чтобы сохранить их, и извлекать их обратно после, чтобы восстановить их. Неважно, делается ли это внутри или вне вызываемой функции, однако хорошей практикой является установление соглашения для этого (называемого "calling convention"(соглашением о вызове), чтобы все функции были совместимы друг с другом.`),
  (info, `Этот уровень предназначен только для того, чтобы вы могли исследовать, как работают функции, теста нет. Обязательно прочитайте ассемблер и пройдите его до конца, чтобы понять, как все работает. Это будет необходимо для будущих уровней.`)
]

default_isa_spec = `
[settings]
name = "Symphony"

[fields]

register
zr 0000
r1 0001
r2 0010
r3 0011
r4 0100
r5 0101
r6 0110
r7 0111
r8 1000
r9 1001
r10 1010
r11 1011
r12 1100
r13 1101
sp 1110
flags 1111

[instructions]

or %a(регистр), %b(регистр), %c(регистр)
01000001 aaaabbbb 0000cccc 00000000
ИЛИ(OR) %b и %c и сохранить результат в %a.

nand %a(регистр), %b(регистр), %c(регистр)
01000000 aaaabbbb 0000cccc 00000000
ИСКЛ-ИЛИ(NAND) %b и %c и сохранить результат в %a.

nor %a(регистр), %b(регистр), %c(регистр)
01000011 aaaabbbb 0000cccc 00000000
ИЛИ-НЕ(NOR) %b и %c и сохранить результат в %a.

and %a(регистр), %b(регистр), %c(регистр)
01000010 aaaabbbb 0000cccc 00000000
И(AND) %b и %c и сохранить результат в %a.

add %a(регистр), %b(регистр), %c(регистр)
01000100 aaaabbbb 0000cccc 00000000
СЛОЖИТЬ %b + %c и сохранить результат в %a.

sub %a(регистр), %b(регистр), %c(регистр)
01000101 aaaabbbb 0000cccc 00000000
ВЫЧЕСТЬ %b - %c и сохранить результат в %a.

xor %a(регистр), %b(регистр), %c(регистр)
01000110 aaaabbbb 0000cccc 00000000
ИСКЛ-ИЛИ(XOR) %b и %c и сохранить результат в %a.

lsl %a(регистр), %b(регистр), %c(регистр)
01000111 aaaabbbb 0000cccc 00000000
ЛОГИЧЕСКИЙ СДВИГ ВЛЕВО %b на %c и сохранить результат в %a.

lsr %a(регистр), %b(регистр), %c(регистр)
01001000 aaaabbbb 0000cccc 00000000
ЛОГИЧЕСКИЙ СДВИГ ВПРАВО %b на %c и сохранить результат в %a.

cmp %a(регистр), %b(регистр)
01001001 1111aaaa 0000bbbb 00000000
Сравнивает %a и %b и сохраняет результат сравнения в r6.

or %a(регистр), %b(регистр), %c(явное число)
01010001 aaaabbbb cccccccc cccccccc
ИЛИ(OR) %b и %c и сохранить результат в %a.

nand %a(регистр), %b(регистр), %c(явное число)
01010000 aaaabbbb cccccccc cccccccc
И-НЕ(NAND) %b и %c и сохранить результат в %a.

nor %a(регистр), %b(регистр), %c(явное число)
01010011 aaaabbbb cccccccc cccccccc
И-НЕ(NOR) %b и %c и сохранить результат в %a.

and %a(регистр), %b(регистр), %c(явное число)
01010010 aaaabbbb cccccccc cccccccc
И %b и %c и сохранить результат в %a.

add %a(регистр), %b(регистр), %c(явное число)
01010100 aaaabbbb cccccccc cccccccc
СЛОЖЕНИЕ(ADD) %b и %c и сохранить результат в %a.

sub %a(регистр), %b(регистр), %c(явное число)
01010101 aaaabbbb cccccccc cccccccc
ВЫЧЕСТЬ %b - %c и сохранить результат в %a.

xor %a(регистр), %b(регистр), %c(явное число)
01010110 aaaabbbb cccccccc cccccccc
ИСКЛ-ИЛИ(XOR) %b и %c и сохранить результат в %a.

lsl %a(регистр), %b(регистр), %c(явное число)
01010111 aaaabbbb cccccccc cccccccc
ЛОГИЧЕСКИЙ СДВИГ ВЛЕВО %b и %c и сохранить результат в %a.

lsr %a(регистр), %b(регистр), %c(явное число)
01011000 aaaabbbb cccccccc cccccccc
ЛОГИЧЕСКИЙ СДВИГ ВПРАВО %b и %c и сохранить результат в %a.

cmp %a(регистр), %b(явное число)
01011001 1111aaaa bbbbbbbb bbbbbbbb
Сравнивает %a и %b и сохраняет результат сравнения в r6.

jmp %a(регистр)
10001000 00001111 0000aaaa 00000000
Переход к %a.

jmp %a(явное число | метка)
10011000 00001111 aaaaaaaa aaaaaaaa
Переход к %a

je %a(явное число | метка)
10010001 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если значения были равны (чтение результатов из 'flags').

jne %a(явное число | метка)
10011001 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если значения не были равны (чтение результатов из 'flags').

jb %a(явное число | метка)
10010010 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было меньше (беззнаковое сравнение) второго (чтение результатов из 'flags').

jae %a(явное число | метка)
10011010 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было больше (беззнаковое сравнение) или равно второму (чтение результатов из 'flags').

jbe %a (явное число | метка)
10010011 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было меньше (беззнаковое сравнение) или равно второму (чтение результатов из 'flags').

ja %a (явное число | метка)
10011011 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было больше (беззнаковое сравнение) второго (чтение результатов из 'flags').

jl %a (явное число | метка)
10010100 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было меньше (знаковое сравнение) второго (чтение результатов из 'flags').

jge %a (явное число | метка)
10011100 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было больше (знаковое сравнение) или равно второму (чтение результатов из 'flags').

jle %a (явное число | метка)
10010101 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было меньше (знаковое сравнение) или равно второму (чтение результатов из 'flags').

jg %a (явное число | метка)
10011101 00001111 aaaaaaaa aaaaaaaa
Переход к %a, если первое значение было больше (знаковое сравнение) второго (чтение результатов из 'flags').

keyboard %a(регистр)
00001001 aaaa0000 00000000 00000000
Загружает ввод с клавиатуры и сохраняет его в %a

console %a(регистр)
00000011 00000000 0000aaaa 00000000
Сохраняет значение %a в регистр смещения консоли

console %a(явное число)
00010011 00000000 0000aaaa 00000000
Сохраняет значение %a в регистр смещения консоли

time_0 %a(регистр)
00000100 aaaa0000 00000000 00000000
Загружает первые два байта значения времени и сохраняет их в %a

time_1 %a(регистр)
00000101 aaaa0000 00000000 00000000
Загружает вторые два байта значения времени и сохраняет их в %a

time_2 %a(регистр)
00000110 aaaa0000 00000000 00000000
Загружает третьи два байта значения времени и сохраняет их в %a

time_3 %a(регистр)
00000111 aaaa0000 00000000 00000000
Загружает четвертые два байта значения времени и сохраняет их в %a

counter %a(регистр)
00001000 aaaa0000 00000000 00000000
Загружает значение счетчика и сохраняет его в %a

load %dest(регистр), [%address(регистр)]
11000000 dddd0000 0000aaaa 00000000
Загружает %address из ОЗУ и сохраняет его в %dest

store [%address (регистр)], %value (регистр)
11000001 0000vvvv 0000aaaa 00000000
Сохраняет %value в %address в ОЗУ

load %dest(регистр), [%address(явное число)]
11010000 dddd0000 aaaaaaaa aaaaaaaa
Загружает %address из ОЗУ и сохраняет его в %dest

store [%address(явное число)], %value(регистр)
11010001 0000vvvv aaaaaaaa aaaaaaaa
Сохраняет %value в %address в ОЗУ

pload %dest(регистр), [%address(регистр)]
11000010 dddd0000 0000aaaa 00000000
Загружает %address из SSD и сохраняет его в %dest

pstore [%address(регистр)], %value(регистр)
11000011 0000vvvv 0000aaaa 00000000
Сохраняет %value в %address в SSD

pload %dest(регистр), [%address(явное число)]
11010010 dddd0000 aaaaaaaa aaaaaaaa
Загружает %address из SSD и сохраняет его в %dest

pstore [%address(явное число)], %value(регистр)
11010011 0000vvvv aaaaaaaa aaaaaaaa
Сохраняет %value в %address в SSD

mov %a(регистр), %b(регистр)
01000001 aaaabbbb 00000000 00000000
Перемещает значение в %a из %b

neg %a(регистр), %b(регистр)
01000101 aaaa0000 0000bbbb 00000000
Меняет знак %b и сохраняет результат в %a

not %a(регистр), %b(регистр)
01000011 aaaa0000 0000bbbb 00000000
Выполняет побитовую операцию NOT над %b и сохраняет результат в %a

mov %a(регистр), %b(явное число)
01010001 aaaa0000 bbbbbbbb bbbbbbbb
Перемещает значение в %a из %b

neg %a(регистр), %b(явное число)
01010101 aaaa0000 bbbbbbbb bbbbbbbb
Меняет знак %b и сохраняет результат в %a

not %a(регистр), %b(явное число)
01010011 aaaa0000 bbbbbbbb bbbbbbbb
Выполняет побитовую операцию NOT над %b и сохраняет результат в %a

nop
00000000 00000000 00000000 00000000
Ничего не делает

pop %a(регистр)
11000000 aaaa0000 00001110 00000000   01010100 11101110 00000000 00000010
Извлекает %a из стека. Эта инструкция является синонимом: load %a, [sp]   add sp, sp, 2

call %a(метка)
00001000 11110000 00000000 00000000   01010100 11111111 00000000 00010100   01010101 11101110 00000000 00000010   11000001 00001111 00001110 00000000   10011000 00001111 aaaaaaaa aaaaaaaa
Вызывает %a. Перезаписывает регистр флагов. Эта инструкция является синонимом: counter flags   add flags, flags, 20   sub sp, sp, 2  store [sp], flags  jmp %a

ret
11000000 11110000 00001110 00000000   01010100 11101110 00000000 00000010   10001000 00001111 00001111 00000000
Возвращается из последнего вызова функции. Перезаписывает регистр флагов. Эта инструкция является синонимом:  load flags, [sp]  add sp, sp, 2  jmp flags

in %a(регистр)
00000001 aaaa0000 00000000 00000000
Загружает входное значение и сохраняет его в %a

out %a(регистр)
00000010 00000000 0000aaaa 00000000
Отправляет %a на выход

out %a(немедленное значение)
00010010 00000000 aaaaaaaa aaaaaaaa
Отправляет %a на выход
`
default_assembly = `

; Соглашение вызовов:
; r1 и r2 используются для аргументов, в r1 записывается результат функции
; За исключением r1 и r2, функция должна возвращаться с 
; сохранением всех регистров в их исходных значениях

in r1
in r2

call power
out r1

multiply:

    push r3

    mov r3, 0

    jmp mul_condition
    mul_start:
    sub r2, r2, 1
    add r3, r3, r1
    mul_condition:
    cmp r2, 0
    jne mul_start

    mov r1, r3
    pop r3

    ret

power:

    push r3
    push r4

    mov r3, r1
    mov r4, r2

    pow_start:
    sub r4, r4, 1

    mov r2, r3

    call multiply

    pow_condition:
    cmp r4, 0
    jne pow_start

    pop r4
    pop r3

    ret


`
