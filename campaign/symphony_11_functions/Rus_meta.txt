kind = sequential
no_score = true
title = "Functions"
immutable_program = true
immutable_spec = true
copy_solution_to_level = ["symphony_12_pipelining"]
copy_solution_to_architecture = "Symphony"
no_score = true
size = [-256, -256, 255, 255]
unlocks_pages = ["ASCII encoding"]
(dialogue = [
  (info, `Иногда бывает полезно повторно использовать участок кода. Мы называем эти участки functions(функциями). Чтобы повторно использовать код, нужно перейти к началу функции и вернуться обратно в конце. Мы называем переход к функции call(вызовом) функции, а возвращение из функции return(возвращением).

Но для того чтобы этот участок кода действительно был переиспользуемым, возврат должен уметь возвращаться в разные места, в зависимости от того, откуда мы вызвали функцию.

Мы могли бы сохранить значение счетчика в регистр перед переходом к функции и использовать это значение при возврате. Однако, если так сделать, функция не сможет вызвать другую функцию, так как это перезапишет исходный адрес возврата.

Предположим, функция A вызывает функцию B, которая вызывает функцию C. Когда мы хотим вернуться из C, нам нужен только адрес возврата для B, а в B нужен только адрес для A. В общем, независимо от того, на какую функцию мы смотрим и как они вызывают друг друга, последний добавленный адрес возврата всегда будет первым, который нам снова понадобится. Это именно то поведение, которое обеспечивает стек.
`),
  (info, `В этом уровне в ваш список инструкций добавлены инструкции "call"(вызов функции) и "ret"(возврат). Обе эти инструкции являются сложными синонимами.

"call" используется для входа в функцию. Он помещает адрес следующей инструкции в стек (читая счетчик и добавляя смещение). Затем он переходит к началу функции.

"ret" используется для возврата из функции. Он извлекает адрес возврата из стека и переходит к нему.`),
  (info, `Так как функции, вероятно, изменяют значения регистров, мы можем помещать значения в стек, чтобы сохранить их, и извлекать их обратно после, чтобы восстановить их. Неважно, делается ли это внутри или вне вызываемой функции, однако хорошей практикой является установление соглашения для этого (называемого "calling convention"(соглашением о вызове), чтобы все функции были совместимы друг с другом.`),
  (info, `Этот уровень предназначен только для того, чтобы вы могли исследовать, как работают функции, теста нет. Обязательно прочитайте ассемблер и пройдите его до конца, чтобы понять, как все работает. Это будет необходимо для будущих уровней.`)
]
default_isa_spec = `
[settings]
name = "Symphony"

[fields]

register
zr 0000
r1 0001
r2 0010
r3 0011
r4 0100
r5 0101
r6 0110
r7 0111
r8 1000
r9 1001
r10 1010
r11 1011
r12 1100
r13 1101
sp 1110
flags 1111

[instructions]

or %a(register), %b(register), %c(register)
01000001 aaaabbbb 0000cccc 00000000
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(register)
01000000 aaaabbbb 0000cccc 00000000
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(register)
01000011 aaaabbbb 0000cccc 00000000
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(register)
01000010 aaaabbbb 0000cccc 00000000
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(register)
01000100 aaaabbbb 0000cccc 00000000
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(register)
01000101 aaaabbbb 0000cccc 00000000
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(register)
01000110 aaaabbbb 0000cccc 00000000
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(register)
01000111 aaaabbbb 0000cccc 00000000
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(register)
01001000 aaaabbbb 0000cccc 00000000
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
01001001 1111aaaa 0000bbbb 00000000
Compares %a and %b and store the resulting flags in r6.

mul %a(register), %b(register), %c(register)
01001010 aaaabbbb 0000cccc 00000000
MUL %b and %c and store the result in %a.

or %a(register), %b(register), %c(immediate)
01010001 aaaabbbb cccccccc cccccccc
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(immediate)
01010000 aaaabbbb cccccccc cccccccc
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(immediate)
01010011 aaaabbbb cccccccc cccccccc
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(immediate)
01010010 aaaabbbb cccccccc cccccccc
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(immediate)
01010100 aaaabbbb cccccccc cccccccc
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(immediate)
01010101 aaaabbbb cccccccc cccccccc
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(immediate)
01010110 aaaabbbb cccccccc cccccccc
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(immediate)
01010111 aaaabbbb cccccccc cccccccc
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(immediate)
01011000 aaaabbbb cccccccc cccccccc
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
01001001 1111aaaa 0000bbbb 00000000
Compares %a and %b and store the resulting flags in r6.

mul %a(register), %b(register), %c(register)
01001010 aaaabbbb 0000cccc 00000000
MUL %b and %c and store the result in %a.
cmp %a(register), %b(immediate)
01011001 1111aaaa bbbbbbbb bbbbbbbb
Compares %a and %b and store the resulting flags in r6.

mul %a(register), %b(register), %c(immediate)
01011010 aaaabbbb cccccccc cccccccc
MUL %b and %c and store the result in %a.


jmp %a(register)
10001000 00001111 0000aaaa 00000000
Jump to %a


jmp %a(immediate | label)
10011000 00001111 aaaaaaaa aaaaaaaa
Jump to %a

je %a(immediate | label)
10010001 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the values were equal (reading results from 'flags').

jne %a(immediate | label)
10011001 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the values were not equal (reading results from 'flags').


jb %a(immediate | label)
10010010 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was below (unsigned) the second (reading results from 'flags').

jae %a(immediate | label)
10011010 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) or euqal to the second (reading results from 'flags').

jbe %a(immediate | label)
10010011 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the First value was below (unsigned) or equal to the second (reading results from 'flags').

ja %a(immediate | label)
10011011 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was above (unsigned) the second (reading results from 'flags').


jl %a(immediate | label)
10010100 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) than the second (reading results from 'flags').

jge %a(immediate | label)
10011100 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) or equal to the second (reading results from 'flags').

jle %a(immediate | label)
10010101 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was less (signed) or equal to the second (reading results from 'flags').

jg %a(immediate | label)
10011101 00001111 aaaaaaaa aaaaaaaa
Jump to %a if the first value was greater (signed) than the second (reading results from 'flags').

keyboard %a(register)
00001001 aaaa0000 00000000 00000000
Loads keyboard input and stores it to %a

console %a(register)
00000011 00000000 0000aaaa 00000000
Stores the value of %a in the console offset register

console %a(immediate)
00010011 00000000 0000aaaa 00000000
Stores the value of %a in the console offset register

time_0 %a(register)
00000100 aaaa0000 00000000 00000000
Loads the first two bytes of the time value and stores it to %a

time_1 %a(register)
00000101 aaaa0000 00000000 00000000
Loads the second two bytes of the time value and stores it to %a

time_2 %a(register)
00000110 aaaa0000 00000000 00000000
Loads the third two bytes of the time value and stores it to %a

time_3 %a(register)
00000111 aaaa0000 00000000 00000000
Loads the fourth two bytes of the time value and stores it to %a

counter %a(register)
00001000 aaaa0000 00000000 00000000
Loads the counter value and stores it to %a

load_8 %dest(register), [%address(register)]
11000000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_8 [%address(register)], %value(register)
11000001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_8 %dest(register), [%address(immediate)]
11010000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_8 [%address(immediate)], %value(register)
11010001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

load_16 %dest(register), [%address(register)]
11000010 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_16 [%address(register)], %value(register)
11000011 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_16 %dest(register), [%address(immediate)]
11010010 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_16 [%address(immediate)], %value(register)
11010011 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM
load_8 %dest(register), [%address(register)]
11000000 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_8 [%address(register)], %value(register)
11000001 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_8 %dest(register), [%address(immediate)]
11010000 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_8 [%address(immediate)], %value(register)
11010001 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM

load_16 %dest(register), [%address(register)]
11000010 dddd0000 0000aaaa 00000000
Loads %address from RAM and stores it to %dest

store_16 [%address(register)], %value(register)
11000011 0000vvvv 0000aaaa 00000000
Store %value to %address in RAM

load_16 %dest(register), [%address(immediate)]
11010010 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store_16 [%address(immediate)], %value(register)
11010011 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM
pload_8 %dest(register), [%address(register)]
11000100 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_8 [%address(register)], %value(register)
11000101 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_8 %dest(register), [%address(immediate)]
11010100 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_8 [%address(immediate)], %value(register)
11010101 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

pload_16 %dest(register), [%address(register)]
11000110 dddd0000 0000aaaa 00000000
Loads %address from SSD and stores it to %dest

pstore_16 [%address(register)], %value(register)
11000111 0000vvvv 0000aaaa 00000000
Store %value to %address in SSD

pload_16 %dest(register), [%address(immediate)]
11010110 dddd0000 aaaaaaaa aaaaaaaa
Loads %address from SSD and stores it to %dest

pstore_16 [%address(immediate)], %value(register)
11010111 0000vvvv aaaaaaaa aaaaaaaa
Store %value to %address in SSD

nop
00000000 00000000 00000000 00000000
Does nothing

mov %a(register), %b(register)
01000001 aaaabbbb 00000000 00000000
Move from %a to %b

neg %a(register), %b(register)
01000101 aaaa0000 0000bbbb 00000000
Neg %b and store the result in %a.

not %a(register), %b(register)
01000011 aaaa0000 0000bbbb 00000000
Not %b and store the result in %a.

mov %a(register), %b(immediate)
01010001 aaaa0000 bbbbbbbb bbbbbbbb
Move from %a to %b

neg %a(register), %b(immediate)
01010101 aaaa0000 bbbbbbbb bbbbbbbb
Neg %b and store the result in %a.

not %a(register), %b(immediate)
01010011 aaaa0000 bbbbbbbb bbbbbbbb
Not %b and store the result in %a.

push %a(register)
01010101 11101110 00000000 00000010   11000011 0000aaaa 00001110 00000000
Pushes %a on to the stack. This instruction is a synonym for:   sub sp, sp, 2   store_16 [sp], %a

pop %a(register)
11000010 aaaa0000 00001110 00000000   01010100 11101110 00000000 00000010
Pops %a off the stack. This instruction is a synonym for:   load_16 %a, [sp]   add sp, sp, 2

call %a(label)
00001000 11110000 00000000 00000000   01010100 11111111 00000000 00010100   01010101 11101110 00000000 00000010   11000011 00001111 00001110 00000000   10011000 00001111 aaaaaaaa aaaaaaaa
Calls %a. Overwrites the flag register. This instruction is a synonym for:   counter flags   add flags, flags, 20   sub sp, sp, 2   store_16 [sp], flags   jmp %a

ret
11000010 11110000 00001110 00000000   01010100 11101110 00000000 00000010   10001000 00001111 00001111 00000000
Returns from the last function call. Overwrites the flag register. This instruction is a synonym for:   load_16 flags, [sp]   add sp, sp, 2   jmp flags

in %a(register)
00000001 aaaa0000 00000000 00000000
Loads an input and stores it in %a

out %a(register)
00000010 00000000 0000aaaa 00000000
Sends %a to output

out %a(immediate)
00010010 00000000 aaaaaaaa aaaaaaaa
Sends %a to output

`
default_assembly = `

; Соглашение вызовов:
; r1 и r2 используются для аргументов, в r1 записывается результат функции
; За исключением r1 и r2, функция должна возвращаться с 
; сохранением всех регистров в их исходных значениях

in r1
in r2

call power
out r1

multiply:

    push r3

    mov r3, 0

    jmp mul_condition
    mul_start:
    sub r2, r2, 1
    add r3, r3, r1
    mul_condition:
    cmp r2, 0
    jne mul_start

    mov r1, r3
    pop r3

    ret

power:

    push r3
    push r4

    mov r3, r1
    mov r4, r2

    pow_start:
    sub r4, r4, 1

    mov r2, r3

    call multiply

    pow_condition:
    cmp r4, 0
    jne pow_start

    pop r4
    pop r3

    ret


`
