kind = sequential
title = "Снова прибавьте 5"
tests = 32
size = [-80, -50, 43, 45]
remove_components = [com_punch_card]
copy_solution_to_architecture = "Overture"
dialogue = [
  (alien_centered, "Программирование с установкой битов вручную является утомительным. Нам нужно, чтобы вы научились ассемблерному программированию."),
  (alien_centered, `Я заменил компонент перфокарты на компонент ОЗУ, который выглядит почти идентично, за исключением нескольких дополнительных контактов. Нажмите на кнопку "редактировать", чтобы начать программирование на ассемблере. Этот уровень идентичен предыдущему - считайте входное значение, добавьте 5 и переместите его на выход.`),
  (overture),
]
default_isa_spec = `

[settings]
name = "Overture"

[fields]

Регистры
r0 000
r1 001
r2 010
r3 011
r4 100
r5 101
in 110  ;in  - ввод
out 110 ;out - вывод

[instructions]

mov %a(register), %b(register)
10bbbaaa
Перемещает(MOVe) значение из %b в %a.

imm %a(immediate | label)
00aaaaaa
Явно число %a в r0.

nand
01000000
И-НЕ(NAND) с r1 и r2 и запись результата в r3.

or
01000001
ИЛИ(OR) с r1 и r2 и запись результата в r3.

and
01000010
И(AND) с r1 и r2 и запись результата в r3.

nor
01000011
ИЛИ-НЕ(NOR) с r1 и r2 и запись результата в r3.

add
01000100
Сложение(ADD) r1 и r2 и запись результата в r3.

sub
01000101
Вычитание(SUB) из r1 значения r2 и запись результата в r3.

nop
11000000
Ничего(No) не делать. Нет операции.(OPeration).

jmp
11000001
Прыгнуть(JuMP) по r0.

jz
11000010
Прыгнуть(Jump) на r0 если r3 равен 0(Zero).

jnz
11000011
Прыгнуть(Jump) на r0 если r3 не(Not) 0(Zero).

jl
11000100
Прыгнуть(jump) на r0 если r3 меньше(Less) 0.

jge
11000101
Прыгнуть(Jump) на r0 если r3 больше(Greater) или равно(Equal) 0.

jle
11000110
Прыгнуть(Jump) на r0 если r3 меньше(Less) или равно(Equal) 0.

jg
11000111
Прыгнуть(Jump) на r0 если r3 больше(Greater) 0.

`
default_assembly = `; Это комментарий

mov r2, in ; Копирует ввход в reg 2

; <- Нажмите "Ассемблер" чтобы увидеть все инстуркции

`
