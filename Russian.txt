=== trans/panel_nor_description ===

$95856050655799* [center]Совершает побитовую операцию NOR по отношению ко 2 входам[/center]


=== trans/panel_program_1_output ===

$31398283096964* Выход


=== trans/panel_register16_outputs ===

$91613202877683* Выход


=== trans/level_registers_description ===

$73800316874022* [center]Создайте схему соответствующую спецификациям кодов[/center]


=== trans/level_circumference_description ===

$20154743351442* [center]Добавьте условия к кодам вычислений[/center]


=== trans/panel_car_output_0 ===

$21449898267446* Перенос


=== misc/options ===

$49251062339706* Настройки


=== trans/panel_halt_label ===

$81678588906692* Сообщение при остановке


=== misc/ide_delete_program ===

$30480928296639* Вы уверены, что хотите удалить эту программу: {program}?
$87279416580516* Да


=== dialogue/schematic_hub/submit_comment ===

$56450764824675* Отправить


=== trans/manual_text_console ===

$93172935338720*
Компонент консоли 80x25 [color=#dd6576][url=ASCII encoding]ASCII[/url][/color]. Должен быть подключён к источнику памяти через кнопку ссылки на компонент.
 [img=200]dialogue/manual/Console/link_state.png[/img]

Обновление связанной памяти затем обновит визуальные элементы на консоли. В стандартном бесцветном режиме каждый байт в компоненте памяти определяет, какой [color=#dd6576][url=ASCII encoding]ASCII[/url][/color] символ будет отображен в соответствующем месте на экране. Однако первая позиция символа может быть смещена с помощью входного контакта на консоли. Это, например, полезно при реализации прокрутки.

Консоль также имеет цветной режим, который можно включить с помощью панели:
[img=125]dialogue/manual/Console/color_mode.png[/img]


В этом режиме каждая ячейка на консоли определяется 2 байтами: первый — это [color=#dd6576][url=ASCII encoding]ASCII[/url][/color] символ, а второй — байт цвета. 4 старших бита байта цвета определяют передний план, в то время как 4 младших бита определяют фон.


=== trans/level_tower_description ===

$19095794285423* Переупорядочи радиоактивные диски


=== trans/cpu_optimizations ===

$31733554125775*


ЗАДАЧИ
НА
АССЕМБЛЕРЕ
=== trans/panel_lessu_description ===

$10492822526537* [center]Проверь: Вход 1 < Вход 2?[/center]


=== trans/panel_switch_output ===

$86922225714685* Выход


=== trans/panel_switch_input ===

$27545152958344* [right]Вход[/right]


=== misc/ui_panel/outputs ===

$29350436761480* ВЫХОДЫ


=== misc/instr_delete ===

$91861509153454* Удалить


=== trans/level_multiply_description ===

$28761562806647* [center]Попарно AND каждый бит[/center]


=== components/FrontPanel/edit ===

$29609529174630* Правка
$69225895527352* Правка Передней Панели


=== trans/component_panel_sprite_input_description ===

$76433786063719*
[b][color=#e49f44]Тип команды[/color][/b]
[code]0[/code] Нет команды
[code]1[/code] [color=#e49f44]Загрузить спрайт[/color]
[code]2[/code] [color=#e49f44]Установить позицию[/color]


=== trans/manual_the_robot ===

$92896462984546* Робот


=== trans/level_bit_inverter_RichTextLabel2 ===

$67127889187842*
[right][color=#e49f44]Значение
Инвертировать[/color]
Ожидаемый выход
Текущий выход[/right]


=== trans/panel_network_output_description ===

$44520675249142*
[b][color=#39aa49]Тип события[/color] (results)[/b]
[code]0[/code] Нет новых событий
[code]1[/code] [color=#39aa49]Входящее подключение[/color] (ID Подключения, порт)
[code]2[/code] [color=#39aa49]Подключение завршено[/color] 
[code]3[/code] [color=#39aa49]Получение данных[/color] (ID Подключения, данные, размер данных)
[code]4[/code] [color=#39aa49]Подключение закрыто[/color] (ID Подключения/Код ошибки)


=== trans/rpg_complete_text5 ===

$15921686607849* [center]Ферма слизней[/center]


=== trans/panel_program4_output ===


# [img=430]dialogue/screen.png[/img]
$49102474695500* Вывод


=== trans/manual_text_top_the_robot ===

$45646734925323*
Экран показывает робота и его окружение.

[img=430]dialogue/screen.png[/img]


=== trans/panel_clock_input ===


# Click the edit icon on the program component to start programming.
$26264925364981* [right]Включить [/right]


=== levels/binary_programming ===

$11540713506719*
Теперь вы можете свободно менять программу вашего компьютера.

Нажмите на значок редактирования в компоненте программы, чтобы начать программирование.


=== trans/ide_memory_address ===

$41993652565569* Регистры


=== levels/delay_level ===

$17854168097855* Проверить


=== misc/specification_dialogue ===

$93899425142858* Скопировать из {from} в {to}
$81322935207536* ВХОД
$66801938842592* {operation} {register_1} и {register_2}
$92046368194170* Условие
$39935096343723* Никогда
$52961346176405* {condition} скопируйте [color=#dd6576]РЕГ 0[/color] в счетчик.

#  Overture instruction UI
$56175681834727* Когда [color=#e49f44]результат {condition}[/color]
$31185395052385* ВЫХОД
$10141348037745* Число: {nr}
$98983752580592* Скопировать
$25145891843959* Всегда
$53665446068319* НЕИСП
$26521666422399* Посчитать
$54909668901048* Число


=== trans/rpg_complete_chest ===

$59394224080614* [center]Сундук Трикси[/center]


=== trans/level_conditions_description ===

$62540112577327* [center]Если значение соответствует условию, выведите [img]dialogue/on.png[/img], иначе [img]dialogue/off.png[/img].[/center]


=== trans/panel_network_outputs ===

$68275268516971*
ID Соединения
Данные / Порт / Код ошибки
Длина данных


=== misc/ui_comment ===

$69987793052607* Комментарий (Нажать по проводу)


=== trans/panel_register16_inputs ===

$24481621052219* Загрузка


=== ui/export_select_path ===

$50432926756438* Изменить


=== component_panels/verilog/label_edit ===

$88118051806174* Имя


=== trans/panel_xor ===

$89363100135433*
[right]Вход 0
Вход 1
Выход[/right]


=== trans/manual_text_assembly ===

$36024314120476* Вы можете использовать комбинацию ассемблерных кодов и чисел для указания байт. Ассемблерные коды являются просто синонимами битовых шаблонов. Например, вместо того чтобы вводить 196 для "add"(прибавить), этот код можно назвать "add" напрямую, что упростит чтение и написание кода.


=== trans/panel_dual_load_input ===

$93092890899642*
[right]Чтение
Запись
Адрес
Значение записи
Чтение 2
Адрес 2[/right]


=== trans/rpg_complete_flower ===

$15192250170799* [center]Думио и Грульетта[/center]


=== trans/panel_maker32_input ===

$35468357923514*
[right]Слово 1
Слово 2
Слово 3
Слово 4[/right]


=== trans/panel_xnor_output ===

$69594087046834* Выход


=== trans/panel_decoder3_input ===

$82288570082172*
[right]Вход 1
Вход 2
Вход 3[/right]


=== trans/panel_input_right ===

$95766090310621* Право


=== trans/level_byte_xor_description ===

$44752799134543* Побитово применить "исключающее ИЛИ" к двум байтам


=== dialogue/schematic_hub/share_button ===

$72402014450423* [center]Публикация...[/center]
$63199010304839* Опубликовать


=== trans/options_pipette_wire ===


# Comments can be added using "#". [img]dialogue/comment.png[/img]Additionally, the [color=#c54d5e]CONST[/color] keyword can be used to name a value within a specific program. [img]dialogue/const.png[/img][color=#c54d5e]LABEL[/color] assigns a name to the byte offset of the line it was inserted on. This is especially useful for naming jump destinations.[img]dialogue/label.png[/img]You can add, subtract, multiply, integer divide, modulo, OR, AND or XOR values together using +, -, *, /, %, |, & or ^ respectively.Breakpoints can be added by clicking to the left of a line number. The program will automatically pause at breakpoints when running.[img]dialogue/breakpoint.png[/img]Breakpoints can also be added to any of the linked components, pausing the program when that state is changed. Click on the state and you will see the red dot.[img]dialogue/breakpoint_state.png[/img]Finally, values can be specified in binary with the prefix 0b (so 5 could be 0b0101) and hex with the prefix 0x (so 15 would be 0xff)
$96339976117958* Пипетка для провода


=== misc/files_preview ===

$15827374884671* В родительский каталог
$14135691870941* Последнее изменение\nСхематики
$81783412663552* Пересинхронизировать
$32645745463577* Используется в компонентах
$19184997172542* Используется в архитектурах
$62160230059637* Поделиться
$36200352866864* Посл. изменение
$70617979378677* Посмотреть


=== trans/manual_SpriteDisplay ===

$57792698381638* Спрайтовый Дисплей


=== trans/panel_regred_input ===

$61209423072819*
[right]Чтение
Запись
Значение записи[/right]


=== trans/level_byte_adder_question3 ===

$63991991655078*
[right]Переполнение в
Байте 1
Байте 2[/right]


=== trans/level_complete_wire_comments ===

$92673421413755*
[b]Комментарии на проводах[/b]
[color=#cccccc][i]Добавить комментарии на провода.[/i][/color]


=== trans/panel_counter8_input ===

$50035967147203*
[right]Добавить 1 / Перезаписать
Перезаписать значение[/right]


=== trans/schematic_new_folder_name ===

$86236104278688* Новый каталог


=== trans/panel_output_direction ===

$89612128414294* Направление метки


=== trans/levels_adding_bytes_description ===

$11219613205997* [center]Сложите 2 числа[/center]


=== trans/level_complete_stats ===

$65428404547905* Статистика


=== trans/level_maze_description ===

$25068965294593* [center]Идите к выходу лабиринта[/center]


=== trans/levels_ram_description ===

$52265749461165* Добавьте блок ОЗУ на провод и завершите уровень.


=== trans/manual_text_bytes ===

$73333514253412*
Эта игра предлагает вам построить 8-битный компьютер. На практике это обычно требует от игрока прокладывать 8 параллельных проводов в разных местах.
Чтобы облегчить утомительную работу, вам предоставляется понятие байта, который является просто виртуальной связкой из 8 бит.

Состояние либо байтового ввода/вывода, либо проводной линии представлено числом, вместо красного или зеленого цвета.


=== trans/manual_robot_controls ===

$94513149242653* Управление роботом


=== misc/watchable_state ===

$58678516111149* Связь компонент


=== main_scripts/input ===

$10186190492148* ALT нажатие, чтобы переместить конец провода


=== trans/panel_decoder2_output ===

$98341196231276*
Выход 1
Выход 2
Выход 3
Выход 4


=== component_panels/joiner_index2 ===

$48580511050200*
Верхняя ширина входа

Нижняя ширина входа


=== trans/panel_maker8_input ===

$26123816206996*
[right]Бит 1
Бит 2
Бит 3
Бит 4
Бит 5
Бит 6
Бит 7
Бит 8[/right]


=== trans/level map colors ===

$35696974632265* Карта цветов


=== trans/levels_saving_bytes_text ===

$36838510526259*
[right]Действие
Желаемый выход
Текущий выход
[/right]


=== trans/panel_less_input ===

$32360542068311* Ввод 0


=== misc/sandbox_toggle ===

$30516879701896* Песочница


=== trans/manual_side_the_robot ===

$56547245144983* Робот видит на одну клетку вперед. Имя и идентификатор отображаются здесь. Этот идентификационный номер также является входом компьютера.


=== trans/panel_register64_inputs ===

$44212297072750*
[right]Загрузить
Сохранить
Сохр. значение[/right]


=== trans/panel_shl_output ===

$75492358516234* Выход


=== trans/level_decoder_1_RichTextLabel2 ===

$50454539040073*
[right][color=#e49f44]Вход[/color]
Выход 1
Выход 2[/right]


=== dialogue/manual/endianness_text ===

$63787681127946*
В традиционном понимании данные отображаются в увеличивающихся адресах памяти слева направо. Это гарантирует, что текст ASCII также отображается слева направо, когда символы хранятся в возрастающем порядке.

[code]
         Память (hex)   | ASCII
Адрес:   0  1  2  3  4  | 0 1 2 3 4
Данные:  [color=#ff6680]48[/color] [color=#ffe666]65 [/color][color=#66ff99]6C[/color] [color=#66ccff]6C[/color] [color=#9966ff]6F[/color] | [color=#ff6680]H[/color] [color=#ffe666]e[/color] [color=#66ff99]l[/color] [color=#66ccff]l[/color] [color=#9966ff]o[/color]
[/code]

Кроме того, принято записывать числа так, чтобы наиболее значимые цифры находились слева, таким образом, тринадцать записывается как [color=#ff6680]13[/color], а не [color=#ff6680]31[/color] (хотя слово "тринадцать" само по себе может подразумевать иное).

С учетом этого, очевидный способ представления многобайтового числа, такого как 0x12345678, в памяти выглядит следующим образом:
[code]
         Память (hex)
Адрес:   0  1  2  3
Данные:  [color=#ff6680]12[/color] [color=#ffe666]34[/color] [color=#66ff99]56[/color] [color=#66ccff]78[/color]
[/code]

Это называется [b]Big Endian[/b] (от старшего к младшему, или прямой порядок), потому что более крупные / более значимые цифры хранятся по меньшим адресам.

Однако, когда числа растут в противоположном направлении по сравнению с текстом, это создает алгоритмические трудности. Некоторые приложения, такие как криптография, требуют неограниченных чисел (BitInt), и для этого необходимо иметь возможность увеличивать количество цифр или удалять нули в конце. Логично упорядочить цифры так, чтобы можно было увеличивать число, не обновляя указатель, указывающий на число. Вы, конечно, можете решить, что увеличение означает движение в противоположном направлении, в этом случае у вас возникнет та же проблема при добавлении текста (или необходимо реализовать два типа растущих массивов).


Существуют и другие аспекты хранения чисел, где младшие значащие биты первыми оказываются полезными. Например, гораздо чаще требуется только нижняя часть числа (понижающее приведение), чем только высокая часть. Хранение чисел с младшими значащими цифрами первыми означает, что это можно сделать без изменения указателя.

Соглашение о хранении младших значащих цифр первыми называется [b]Little Endian[/b] (от младшего к старшему, или обратный порядок). К сожалению, просмотр байт в обратном порядке обычно становится еще более запутанным, потому что значения группируются по байтам, которые каждый отображаются в традиционном направлении. Поэтому 0x[color=#66ccff]12[/color][color=#66ff99]34[/color][color=#ffe666]56[/color][color=#ff6680]78[/color] становится:
[code]
         Память (hex)
Адрес:   0  1  2  3
Данные:  [color=#ff6680]78[/color] [color=#ffe666]56[/color] [color=#66ff99]34[/color] [color=#66ccff]12[/color]
[/code]

Если бы было принято записывать числа и текст так, чтобы они увеличивались в одном направлении, не было бы необходимости в этой справочной странице.

Сегодня все современные процессоры используют обратный порядок (Little Endian), и это стало стандартом, за исключением TCP/IP, который использует прямой порядок байтов (Big Endian).


=== trans/rpg_hats_looking_at ===

$10758794610945* ВИДИМ: 13 ШЛЯП


=== trans/panel_outputlevel_enable ===

$88881816595724* [center]Отключить / Включить[/center]


=== component_panels/StaticShift/description ===

$46498488665218* Сдвиг (положительный сдвиг вправо)


=== trans/credit_header ===

$21717110565858* Титры


=== main_menu/sandbox_button ===

$16857608955464* Песочница


=== misc/restore_overture ===

$52008982212566* Сброс


=== trans/_second_tick_RichTextLabel2 ===

$11680718497014*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== trans/level_complete_level_map ===

$20801641140962*
[b]Карта уровня[/b]
[color=#cccccc][i]Нажмите "[color=#e49f44]Дальше[/color]"[/i][/color]


=== dialogue/schematic_hub/delete_comment_confirm ===

$52709446588114* Да
$52823211591830* Вы уверены что хотите удалить этот комментарий?


=== trans/panel_input_down ===

$70002762618597* Вниз


=== levels/bit_inverter ===

$59090842372527* Значение
$15272914096446* Этот уровень точно такой же, как уровень ИСКЛ-ИЛИ(XOR), который вы решили ранее. Помните, что независимо от того, что мы вам скажем, цель уровня заключается в таблице истинности.
$14944872827527* Несмотря на забавный фон, вы поняли, что это всего лишь вентиль ИСКЛ-ИЛИ(XOR) в маскировке! Отлично!
$16125025706490* Хмм, возможно вы даже слишком хорошо изучили поведение линии задержки.
$12399164863741* Да
$22283233360163* Инвертирование
$66589873978580* Нет


=== trans/panel_or ===

$15879871058922*
[right]Вход 1
Вход 2
Выход[/right]


=== trans/options_confirm_reset ===

$55371048386984* Верно


=== misc/hub_comment_label ===

$90173235002118* Комментарии


=== dialogue/options/verilog_mode ===

$95307230990123* Verilog режим


=== component_panels/LatencyRam ===

$87788654491792*
Этот тип ОЗУ добавит 1024 задержки в цепь, но вместо того, чтобы увеличивать продолжительность тактов, мы просто не ждем вывода.

Это означает, что [color=#e49f44]чтение или запись занимает {ticks} тактов[/color] (поскольку в вашей цепи есть задержка {delay}).


=== trans/panel_keyboard_description ===

$11215841169495* [center]Примечание: Хотя клавиатура показывает значение нажатой клавиши, она фактически выдает его только на регулярном такте![/center]


=== misc/ui_panel/left_inputs ===

$16586225094516* ВХОДЫ


=== dialogue/com_punch_card/com_punch_card ===

$57861256694537* Байты {bytes_from} - {bytes_to}


=== trans/panel_shl8_input ===

$61388183229084*
[right]Значение
Сдвинуть на[/right]


=== trans/manual_console ===

$73523750891893* Консоль


=== component_panels/ror_input2 ===

$78051771154995* Прокрутить на


=== trans/always_on_RichTextLabel2 ===

$86547293707045*
[right][color=#ffa502]Вход[/color]
Желаемый выход
Текущий выход[/right]


=== misc/ide_control_link ===

$80788685813993* Управление Роботом


=== misc/level_search ===

$30824356356347* Поиск уровня


=== component_panels/input2 ===

$20556201456156* Вход 1


=== trans/map_keys_to_pan ===

$26276191141664* Используйте клавиатуру


=== misc/options_Score Sync ===

$45371978167502* Синхронизация счёта


=== trans/manual_send_otuput_robot ===

$65542429897149* [center]Для управления роботом отправлять на вывод[/center]


=== trans/options_language ===

$30910326565868* Язык


=== dialogue/assembler/add_name ===

$12944436882589* Добавить регистр


=== trans/panel_input_direction ===

$25170203412473* Направление ввода


=== trans/level_binary_search_description ===

$11976224688780* [center]Восстановить пароль[/center]


=== trans/rpg_complete_derpoo ===

$25534025775791* [center]RIP история[/center]


=== trans/rpg_decoartion ===

$31542517516487* [center] [i][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][img]res://rpg/heart.png[/img][/i] вверху только для декорации![/center]


=== ui/top_bar/scores ===

$68953385743184* СЧЕТ ЭЛЕМЕНТОВ:


=== trans/level_component_factory_Label2 ===

$37347658035959* Обзор компонентов


=== trans/level_binary_programming_description ===

$66247694103179* [center]Добавьте 5 к вводу[/center]


=== trans/or_gate_3_RichTextLabel2 ===

$56903547636751*
[right][color=#e49f44]Вход 1
Вход 2
Вход 3[/color]
Желаемый выход
Текущий выход[/right]


=== misc/options_keys ===

$92993941290486* Shift
$65955105101920* Numpad Enter
$15851382978562* Лево
$12519478101154* End
$13781284353315* Standby
$78882003890612* TAB
$23041433375813* Запустить ярлык 6
$31504133014584* Пробел
$27874359646701* Увеличить громкость
$65834804441085* Открыть URL
$91413612191819* Запустить ярлык D
$39317622588588* Запустить ярлык E
$99716387921256* Меню
$27726004575826* Медия
$68199202258305* Следующая мелодия
$49442994583673* Супер клавиша (Windows)
$96347674697419* Вперёд
$58999281424396* КМД
$59365233304896* Очистить
$17795913351819* Удалить
$57038840198662* CTRL
$50955698469296* Запустить ярлык 9
$63772872007214* Стоп
$10929402286573* Page Down
$71982112085693* Запустить ярлык 7
$93358816396539* ↓
$28214161279082* Запустить ярлык B
$14976122209522* Вставить
$83084380695531* SHIFT + TAB
$70423659540492* Почта
$18970380352793* Alt
$55972860446450* Поиск
$81640191081376* Уменьшить громкость
$20334952085165* →
$91733527994209* Запустить ярлык 2
$73529460447236* Возврат
$50389171923636* Стереть
$64108103861848* Обновить
$86957870260110* Бас тише
$79228417307539* Право
$48472841971511* Любимые
$94137103361291* Играть
$86664894772851* Запустить ярлык F
$40801064032778* Предыдущая песня
$57182221632160* Помощь
$32311987309013* Назад
$92411601634183* Пауза
$93394348651979* Вправо (Hyper)
$64963573823520* Печать экрана
$11442487736991* Сис.Запрос
$83183843351576* Запустить ярлык 0
$74172180238771* Прокрутка
$16897068982305* Правая супер клавиша (Windows)
$24086297669523* Уменьшить громкость
$49947924390850* Запустить ярлык 5
$51594389746074* Запустить ярлык 4
$39382222147951* Caps Lock
$51120580663479* ESC
$66339874250985* Media record
$67529269053604* Home page
$40013272281231* Left Hyper
$17043010993255* Остановить
$47096285951897* Page Up
$47330905474433* Громкость увеличить
$88355661220986* Запустить ярлык C
$78473292327654* ↑
$18909108170114* Запустить ярлык A
$25372126469538* Num Lock
$54347318627968* ←
$17896149617641* Высокие тише
$43488085975448* Домой
$11908889523442* Басы Усилить
$57391159100618* Запустить ярлык 3
$74797401805098* Запустить ярлык 8
$91210884350615* Запустить ярлык 1
$92739814679396* Басы поднять


=== trans/not_gate_click_next2 ===

$20820887361993* Нажмите "Следующий Такт" чтобы увидеть


=== trans/tick_label ===

$39906291838542* Такт


=== trans/manual_short_circuit ===

$41209541005460* Короткое замыкание


=== trans/manual_text_turing_complete ===

$54897112350567*
Некоторые компьютеры, такие как простые калькуляторы, ограничены в алгоритмах, которые они могут выполнять

Они не могут выполнять никакие вычисления, которые требуют циклов или рекурсии произвольное количество раз. Технически машины без циклов или рекурсии могут работать только с комбинаторной логикой.

С другой стороны, машины, обладающие полнотой Тьюринга, обладают максимальной мощностью. Машина полная по Тьюрингу может иметь медленный процессор, но она мощна в том смысле, что нет (вычислимого) алгоритма, который она не может выполнить.


=== trans/panel_xor_description ===

$92999392068622* [center]Побитовое исключающее ИЛИ (ИСКЛ-ИЛИ,XOR) двух входов[/center]


=== trans/panel_fileloader_output ===

$26334594715602* Выход


=== trans/map_assembly_challenges ===

$73793186230158* ЗАДАЧИ НА АССЕМБЛЕРЕ


=== trans/panel_hdd_input ===

$99603056559749*
[right]Смешение
Загрузить
Сохранить
Значение[/right]


=== trans/overwrite_keep_both ===

$70461062797309* Оставить оба


=== trans/architecture_2 ===

$38100016313511* АРХИТЕКТУРА ЦПУ 2


=== component_panels/FileRom ===

$28789952270889* Пусто
$89182778159982* Сейчас по умолчанию: {file_name}


=== trans/level_capitalize_description ===

$31869433910274* Написание имён планет с большой буквы


=== trans/panel_keyboard_left ===

$44556588975494* [right]Читать далее[/right]


=== levels/byte_mux ===

$49305362057225*
Ваш ответ {your_answer}
Правильный ответ {correct_answer} (Вход {input})


=== misc/component_factory_toggle ===

$55499239951858* Фабрика Компонентов


=== trans/level_byte_constant_description ===

$84789919073603* [center]На выходе всегда число 164[/center]


=== component_panels/program_save ===

$61403378737838* Сохранить


=== trans/program_data_width ===

$61720029126995*
[right]Размер слова:
Кол-во слов:
[/right]


=== misc/reset ===

$39440928972984* Сброс (F4)


=== components/Level Gate ===


#  This must be no more than 6 characters long, use abbreviations if necessary
$91472284749011* ЗАДЕРЖ

#  This must be no more than 6 characters long, use abbreviations if necessary
$86260137015175* ТАКТЫ

#  This must be no more than 6 characters long, use abbreviations if necessary
$84124240406304* ИТОГ

#  This must be no more than 6 characters long, use abbreviations if necessary
$15265492169229* ВЕНТИЛ


=== trans/panel_register8_outputs ===

$72930832545270* Выход


=== trans/level_robot_racing_description ===

$67533273328897*
Переместите робота по треку.
Используйте как можно более короткую программу.


=== trans/map_basic_logic ===

$75078723880086* БАЗ. ЛОГИКА


=== trans/options_disagree ===

$60077370372179* Не согласен


=== trans/instructions_hint ===


#  Seen the first time you open thte "instruction" menu 
$65105856275770* [center][color=#c5c5c5]Нажмите для переключения бит[/color][/center]


=== trans/panels_clock_output ===

$79367841142406* Тактовый сигнал


=== trans/options_redo ===

$50610605761210* Вернуть


=== misc/program_edit_button ===

$38481453712356* Редактировать память


=== levels/Crude Awakening ===

$19257730429557*
Сигнал течёт от входа к выходу.
В верхнем левом углу, под "Вход" есть зелёная иконка,
нажмите на неё чтобы отключить компонент "Вход".
$17675121574388* Обратите внимание, что Выход выключился.\nЭто потому, что сигнал прекратил течь от Входа.


=== dialogue/link_register_save ===

$18131235621059* Сохранить


=== misc/instr_clone ===

$69090690657232* Клонировать


=== trans/panel_mux_input ===

$23495704401199*
[right]Выбрать 0 / 1
Вход 0
Вход 1[/right]


=== trans/level_registers_code ===

$40063003736243* [center]ИЛИ (OR)[/center]


=== trans/level_the_bus_description ===

$20464862486158* [center]Скопируйте значение из правильного входа в правильный выход.[/center]


=== misc/option_reset ===

$15557473522933* Сброс


=== trans/panel_decoder1_input ===

$62550086102347* [right]Вход[/right]


=== misc/inst_new_rule ===

$41064305626707* Новое правило


=== trans/level_capitalize_output ===

$37037455015862* Выход


=== trans/options_factory_reset ===

$17721051281188* Сброс до заводских настроек


=== dialogue/schematic_hub/delete_confirm ===

$71921976503347* Да
$46660924781254*
Вы уверены, что хотите
удалить схему под именем '{name}'


=== trans/rpg_press_any_key ===

$66322253595450* [center]Нажмите любую клавишу, чтобы повторить попытку.[/center]


=== trans/manual_De Morgan's laws ===

$67837328811108* Законы де Моргана


=== trans/level_complete_hex ===

$94261690850981*
[b]Шестнадцатеричный (hex)[/b]
[color=#cccccc][i]Переключение между знаковым, беззнаковым и hex числами[/i][/color]


=== levels/binary_racer ===

$25272818268849*
[b]ЗАМЕТКИ[/b]

Надеюсь, вы заметили:
1. Существует ровно 1 способ записать каждое число в двоичной системе.
2. Значение каждой цифры всегда вдвое больше предыдущей цифры.
$37319690622142* Отлично, вы достигли уровня {current_level}.
$11176073682097* Число {number} в двоичном виде?


=== trans/level_complete_gate ===

$99373213759665*
[b]Очки блоков(gate)[/b]
[color=#cccccc][i]Теперь вы можете просматривать баллы блоков, проводов и компонентов.[/i][/color]


=== trans/panel_splitter64_output ===

$95757288075946*
Слово 1
Слово 2
Слово 3
Слово 4
Слово 5
Слово 6
Слово 7
Слово 8


=== trans/level_complete_profile ===

$78783902500954*
[b]Онлайн профиль[/b]
[color=#cccccc][i]Найти в главном меню.[/i][/color]


=== trans/panel_network_input_description ===

$36399689035136*
[b][color=#e49f44]Команда[/color] (аргументы)[/b]
[code]0[/code] Нет запроса
[code]1[/code] [color=#e49f44]Слушать[/color] (Порт)
[code]2[/code] [color=#e49f44]Соединение[/color] (IP, Порт)
[code]3[/code] [color=#e49f44]Отправить данные[/color] (ID соединения, Данные, Длина данных)
[code]4[/code] [color=#e49f44]Закрыть[/color] (ID соединения)
[code]5[/code] [color=#e49f44]Прочитать следующее событие[/color]


=== trans/panel_output_output_3 ===

$94657695889458* Выход 4


=== dialogue/dotMatrixtext_link ===

$82486902873499*
Контакт цвета использует байты 2, 3 и 4 для [color=#dd6576][url=RGB color]RGB цвета[/url][/color] (байт 1 не используется).
Контакт пикселя использует байты 2, 3, 4, 5, 6 и 7 для выбора пикселей, которые нужно раскрасить, где каждый бит соответствует одному пикселю. Обновления видны только после установки байта 8 в 1, это "сбрасывает" изменения и обновляет отображение визуально.

Оба "Включить X" и "Включить Y" должны быть включены, чтобы обновить отображение.


=== trans/options_inline_latches ===

$53886441687616* Включить цикличные схемы


=== trans/panel_decoder3_output ===

$41412072467493* Включается только 1


=== misc/add_code_name ===

$57358078712675* Сохранить


=== levels/double_number ===

$74261206899285* Ваш результат {input} × 2 = {your_answer}\nПравильный {input} × 2 = {correct_answer}


=== ui/state_ui/title_screen/exit ===

$12639868461113* Выйти


=== trans/map_available ===

$81707212583931* Доступно


=== trans/panel_switch_enable ===

$84515289220335* [right]Включить[/right]


=== trans/panel_fulladder_output ===

$18502107482550*
Результат
Переполнение


=== trans/options_window_mode ===

$54328660964287* Оконный режим


=== trans/manual_text_negative_numbers ===

$85226853816564*

Способ, которым эта игра представляет отрицательные числа, называется "двоичное дополнение". Это стандартный способ представления отрицательных чисел в современных компьютерах. Вот несколько ключевых моментов для понимания двоичного дополнения:

1. Чтобы перейти от отрицательного к положительному и наоборот, вы можете инвертировать все биты и добавить 1.
2. Если старший бит [ON], значение всегда отрицательное.
3. Сумматоры работают как в знаковом, так и в беззнаковом режиме.
4. Существует только один способ записать каждое число.

В ранние дни вычислений основным конкурентом двоичного дополнения было "дополнение единицы". Его основное преимущество заключается в том, что изменить знак числа просто: нужно просто инвертировать каждый бит в числе. Однако у 0 есть 2 представления - положительное и отрицательное, что усложняет сравнения.

Еще одно интересное представление, возможно, заслуживающее внимания, это база -2, где знак значения каждой цифры чередуется между положительным и отрицательным.


=== trans/options_waiting ===

$58990937331663* Ожидание


=== misc/ui_panel/memory ===

$65362728703588* ПАМЯТЬ


=== trans/options_console ===

$96601731563408* Открыть консоль


=== trans/panel_output_output_2 ===

$33211646632666* Выход 3


=== trans/options_save_location ===

$61172959716558* Путь до каталога сохранения


=== misc/level_gate_component_icon ===

$83440578602427* Разблокирует компонент


=== trans/ide_add_assembly_header ===

$94462268558066* [center]Добавление кода на ассемблере[/center]


=== dyn_lib/backend/board/custom_prototype ===


#  Default new input pin name for custom compoennts
$64951951489108* Вход

#  Default new output pin name for custom compoennts
$94864122622568* Выход


=== trans/panel_rom_output ===

$19572865856587* Выход


=== misc/hub_search ===

$76770986264566* Поиск


=== misc/solution_option ===

$21618236951146* Посмотреть решение


=== trans/panel_register64_outputs ===

$55631089130544* Выход


=== trans/map_programming ===

$44937904689376* ПРОГРАММИРОВАНИЕ


=== misc/confirm_factory_reset ===

$65699778604521* Удалить Всё


=== misc/run_fast ===

$54853798559740* Запустить быстро (F6) (правая кнопка: изменить скорость)


=== component_panels/cc_input_delay ===

$71609666312090* Смоделированная внешняя задержка


=== dialogue/asm_browser/delete ===

$63693638857058* Этот каталог содержит {folders} каталогов.
$59007729779707* Этот каталог пустой.
$66107456188362* Содержит {folders} каталогов и {asm} .asm файлов.
$93027749509988* Содержит {asm} .asm файлов.
$49284170415573* Вы уверены что ходите удалить файл {file_name}?


=== component_panels/Output8zLevel ===

$35707954769868* Не включено


=== trans/panel_off ===

$61047424972631* Всегда


=== trans/manual_RGB_color ===

$62337044104456* RGB цвет


=== trans/panel_maker8_output ===

$67169082367526* Выход


=== trans/panel_hdd_description ===

$28038932532386* [center]На жестком диске "позиция головки" определяет, по какому адресу выполняются чтение и запись. Используйте знаковый 8-битный контакт поиска, чтобы изменить "позицию головки". Используйте значение поиска 0, если не хотите изменить позицию.[/center]


=== misc/instruction_expand ===

$44690074039467* Переключить определение правил


=== dialogue/isa_overview/no_instructions ===

$40581907394910* Пока нет инструкций


=== trans/panel_or_description ===

$65281182019602* [center]Побитовое ИЛИ (OR) двух входов[/center]


=== trans/panel_input_input_3 ===

$21321167572284* Вход 4


=== trans/level_byte_adder_you_carry_text3 ===

$65048723622767* Число


=== trans/manual_network_label ===

$90392202103470* Введите IP чтобы преобразовать в число


=== trans/level_tick_tock_description ===

$34658332565777* [center]Добавьте 1 к счётчику, или перепишите его[/center]


=== trans/panel_rol_input ===

$95166818170185*
[right]Значение
Прокрутить на[/right]


=== component_panels/Hdd ===

$99685372736199* Позиция головки: {pos}


=== dialogue/size_option_header ===

$75025576123759* Установить значение


=== trans/manual_component_factory ===

$35460636622618* Фабрика Компонентов


=== trans/panel_nor ===

$59430016039613*
[right]Вход 0
Вход 1
Выход[/right]


=== trans/options_status ===

$35063135798145* Состояние


=== trans/map_functions ===

$83960548773205* ФУНКЦИИ


=== trans/manual_universal_gates ===

$28345532918560* Универсальные блоки


=== trans/level_division_headers3 ===

$81978438070842* Частное


=== trans/panel_segment_select_color ===

$90642877666116* [center]Выбор цвета[/center]


=== trans/complete_flower_text3 ===

$81122931510261* [center]КВЕСТ [color=#e49f44]ЗАВЕРШЁН[/color][/center]


=== trans/panel_probewirebit_value ===

$24213353038685* [center]Значение[/center]


=== trans/wire_comment ===

$41481492318983* Заметка линии
$87836369268219* Сохранить
$34083666001769* Заметка линии


=== trans/hub_type ===

$23829497228009* Тип


=== levels/odd_number_of_signals ===

$85589489148198* Использовано \n{nr} из 3 компонентов.


=== trans/manual_text_binary ===

$69488982380310*
Числа, к которым вы привыкли, это десятичная система счисления (основание 10). Здесь, когда мы добавляем 0 к правой стороне числа, его значение увеличивается в 10 раз.

Двоичная система счисления это основание 2, поэтому, делая то же самое, значение просто удваивается. Иными словами, каждая цифра представляет степень 2. Например, с [color=#c54d5e]основанием 2[/color] и [color=#e49f44]основанием 10[/color] в цветах:

[color=#c54d5e]    1[/color] = [color=#e49f44]1[/color]
[color=#c54d5e]  10[/color] = [color=#e49f44]2[/color]
[color=#c54d5e]100[/color] = [color=#e49f44]4[/color]

Чтобы представить 6, мы можем просто сложить 4 и 2:
[color=#c54d5e]110[/color] = [color=#e49f44]6[/color]

Сложение, умножение и все остальные операции работают так же, как и в десятичной системе, за исключением того, что перенос происходит при достижении 2 вместо 10.


=== panel_sound_sound_picker ===

$73758040671294* Заметка (нажмите [i][/i] чтобы заменить)


=== misc/wire_color ===

$78287906849040* Цвет провода


=== trans/level_alu1_description ===

$90245779080897*
[center]ИЛИ(OR), И-НЕ(NAND), ИЛИ-НЕ(NOR) или И(AND)
двух байт вместе[/center]


=== misc/overwrite_custom ===

$26401730066442* Компонент с именем "{comp}" уже существует. Вы хотите его переписать?
$82422962911514* Схема с именем "{schematic}" уже существует. Вы хотите её переписать?


=== misc/dir_delete ===

$94436541903929* Архитектуры: {list}
$17985924005596* Содержит {nr} схем.
$51791491383290* Используется пользовательский компонент
$63013773025775* Вы уверены что хотите удалить {file_name}?
$38011567415872* Каталог пуст.
$57790786178566* Пользовательские компоненты: {list}


=== trans/panel_probewirebit_description ===

$36861847387280* Пробы(зонды) можно использовать для отображения значений на пользовательских компонентах или для связывания значений с программным компонентом.


=== trans/panel_input1_input_0 ===

$76697231893680* Вход


=== trans/panel_matrix_input2 ===

$11173083690745* [right]Включить X[/right]


=== trans/ide_binary_header ===

$22615032668969* Двоичный редактор


=== trans/options_select_all ===

$21380256293472* Выделить всё


=== trans/level_registers_text ===

$78241632854567*
[right][color=#e49f44]Инструкция
Вход[/color][/right]


=== trans/panel_cond_input_0 ===

$59435425554599* Бит 0:


=== trans/hub_status ===

$64105077092961* Загрузка...


=== trans/manual_components ===

$40288888375581* Компоненты


=== trans/manual_text_matrix ===

$75170402412137*
[b]Показ букв[/b]
Так случилось, что пиксельное пространство 5x7, хотя и небольшое, все же способно красиво отображать буквы. Добавив дополнительный ряд и столбец, буквы также будут хорошо выглядеть, когда они расположены рядом друг с другом.

[center][img]dialogue/manual/matrix_letter.png[/img][/center]

[b]Маленький тайловый экран[/b]
Повернув компонент, вы получаете 8x6 пикселей, что имеет приятное соотношение сторон 4:3, и при укладке этих компонентов вы можете получить большинство желаемых разрешений. Способ подключения выводов в этом компоненте был специально разработан для возможности укладки. Представьте себе наивный дизайн выводов, где каждый компонент активируется одним битом. Это потребовало бы подключения 1 провода для каждого компонента. В этой ситуации количество необходимых проводов для плиточного экрана будет пропорционально площади, в то время как зазор, необходимый для размещения проводов между компонентами, будет пропорционален окружности.

[center][img]dialogue/manual/tilable_screen.png[/img][/center]

Вместо этого, имея 2 вывода для включения, один провод может активировать целый ряд, а другой — целый столбец. Таким образом, один компонент может быть выбран по его уникальному сочетанию строки и столбца. Более того, размещение остальных данных на тех же проводах означает, что горизонтальные и вертикальные зазоры должны быть шириной всего 1 квадрат. Этот компонент визуально занимает полквадрата дополнительно со всех сторон, так что эти компоненты могут быть уложены идеально по пикселям, с 1 квадратом скрытым между ними для прокладки проводов.

Instead, by having 2 enable pins, one wire can enable a whole row and another a whole column. This way, a single component can be selected by its unique row and column combination. Further, fitting the rest of the data on the same wires, means that the horizontal and vertical gaps only need to be 1 square wide. This component visually takes up half a square extra on all sides, such that these components can be tiled up pixel perfectly, with 1 square hidden between them for running wires.


=== trans/levels_counting_signals_RichTextLabel2 ===

$34604121212779*
[right]Вход 1
Вход 2
Вход 3
Вход 4[color=#e49f44]
Желаемый выход
Текущий выход[/color][/right]


=== trans/panel_delayline1_output ===

$99213923469748* Выход


=== trans/level_program_text ===

$38014836341470*
[right][color=#e49f44]Инструкция
Вход [/color][/right]


=== trans/level_complete_stat_time ===

$39203727515285* Время


=== trans/map_memory ===

$58330421958143* ПАМЯТЬ


=== ui/options/General ===

$36195388998735* Общее


=== trans/panel_regredplus_input ===

$88713386551026*
[right]Загрузка
Сохранение
Значение[/right]


=== trans/levels_double_the_number ===

$41609125516676* [center]Удвоение числа[/center]


=== levels/not_gate ===

$19085882338208* [b]Инструкция:[/b]\nПравая кнопка сбрасывает выбор.
$10604720087324* [b]Инструкция:[/b]\nПостройте цепь в соответствии с таблицей\nНажмите [i][/i] (Следующий Такт) в верхнем левом углу для проверки каждой комбинации входов.\nУровень будет пройден, когда обе комбинации пройдут тест.
$18442122157391* [b]Инструкция:[/b]\nЧтобы сбросить выбор компонента кликните левой кнопкой на пустом месте.
$12880883686501* [b]Инструкция:[/b]\nВыберете компонент NAND в правом верхнем углу и разместите его на схеме.
$18780831606716* [b]Инструкция:[/b]\nПеремещайте курсор с зажатой левой кнопкой для добавления проводов.


=== trans/hub_add_comment ===

$56654968471533* Добавить комментарий


=== trans/level_delay_level_description ===

$24326379952614* Создайте схему которая стоит 5 ЭЛЕМЕНТОВ и 6 ЗАДЕРЖКИ


=== trans/panel_full_adder_input ===

$67545680105541*
[right]Вход 0
Вход 1
Вход 2[/right]


=== trans/panel_max_data_len_max_data_length ===

$88063177433135* [right]Максимальная длина данных[/right]


=== trans/level_spacial_invasion_description ===

$44980627299841* [center]Подстрели космических крыс![/center]


=== misc/options_ui_scale ===

$49650951662549* Сохранить


=== misc/level_gate_manual_icon ===

$22002156022920* Разблокирована документация


=== dialogue/wire_comment_header ===

$36214576952244* Подписать провод


=== trans/panel_and_description ===

$62144934019319* [center]Побитовое И(AND) двух входов[/center]


=== component_panels/register_inputs2 ===

$70659371512887* Сохранить


=== trans/turing_complete ===

$35911376069529* Полнота по Тьюрингу


=== misc/FileInput ===

$47320399181598* Файл не выбран


=== trans/label_input_input_0 ===

$83039286441109* Вход 0


=== trans/level_constants_description ===

$34641396464207* [center]Добавьте поддержку константы в вашу архитектуру[/center]


=== trans/manual_circular_dependency ===

$40263928358112* Циклическая зависимость


=== trans/component_panels_sprite_inputs ===

$89388086235988*
[right][color=#e49f44]Тип команды[/color]
Спрайт ID
Позиция
Размер[/right]


=== trans/panel_keyboard_right ===

$13812005795415*
Нажать
Значение


=== trans/or_gate_RichTextLabel2 ===

$56663370211115*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== levels/binary_count_down ===

$56999237564848* Секунд осталось: {x}
$41793938939207* Время вышло


=== misc/save_size ===

$71918065858983* Сохранить


=== trans/panel_equal_output ===

$15175350110347* Выход


=== trans/panel_on ===

$77349453746493* Всегда


=== misc/profile ===

$32835651830157* Профиль


=== trans/level_complete_level_complete ===

$49647690443210* [center]Уровень завершён[/center]


=== trans/panel_sound_inputs ===

$45047777963599*
[right]Заметка
Звук[/right]


=== trans/options_setting_export_assembled ===

$98549046707456* Выгрузить ассемблированный код


=== trans/options_setting_click_to_pan ===

$24654961601456* Использовать клик для движения


=== dialogue/test_label ===

$99534264629442* Тест:


=== trans/panel_program_1edit_program ===

$65592803016716* Правка программы


=== trans/panel_clock_output ===

$68395531921934* Наносекунды с 1 января 1970 года


=== components/RegisterRedPlus/text ===

$86184052579493* Всегда выход


=== trans/component_panel_latency_RichTextLabel ===

$41987846284401*
[right]Загрузить
Сохранить
Адрес
Значение[/right]


=== trans/rpg_you_died ===

$66723789644528* [center]ВЫ [color=#eb5260]ПОГИБЛИ[/color][/center]


=== trans/level_wide_instructions_description ===

$60538893544456* [center]Создайте компонент с широкой инструкцией[/center]


=== levels/call_ret/yes ===

$27017757250898* Да


=== trans/manual_component_factory_text ===

$41100325722218*
Откройте Фабрику Компонентов, нажав на эту кнопку [img]dialogue/manual/component_factory_icon.png[/img] в верхнем левом углу.

Фабрика Компонентов позволяет вам создавать пользовательские компоненты. Логика, которую вы размещаете, определяет поведение пользовательского компонента, а компоновка(расположение элементов) определяет его форму.

Входные и выходные компоненты, которые вы размещаете, становятся контактами на компоненте.

Проба(зонд), размещенный в пользовательских компонентах, будет отображаться на их макете и может показывать значения внутри. Зонды могут быть подключены к другим пользовательским компонентам, чтобы отображать вложенные значения. Значения, полученные таким образом, также могут быть подключены к
компоненту программы.

Файловый менеджер в Фабрике Компонентов позволяет управлять пользовательскими компонентами. Имена файлов определяют имя компонентов, а структура каталогов определяет размещение компонентов в меню.


=== misc/delete ===

$53448014080434* Удалить (Правый Клик)


=== misc/network_update ===

$47639082058046* Тут пока ничего нет

#  Showing what components are used in schematics in the hub
$83560387278127* Идёт от:
$86830276924898* Выгружено:
$15762392983604* Размер:

#  If the hub can't load a schematic for some reason
$76023068123024* Ошибка
$70694384106281* Создатель:
$81675147704214* Использует сетевые компоненты
$98151734218561* [center][color=#60a96b]Выгрузка завершена.[/color][/center]
$40010486743721* [center][color=#dd6576]Ошибка выгрузки.[/color][/center]


=== trans/level_complete_stat_delay ===

$43118901497406* Задержка


=== misc/specifications ===

$56390619785555* Смотреть определение инструкций
$68054407020318* Инструкции


=== trans/level_byte_adder_you_carry_text2 ===

$87943759248740* Перенос


=== trans/manual_binary ===

$19098578855427* Двоичные числа


=== trans/pabel_or3 ===

$77994083578205*
[right]Вход 0
Вход 1
Вход 2
Выход[/right]


=== trans/manual_terminology ===

$13311390759928* Терминология


=== trans/panel_and3 ===

$96299326024757*
[right]Вход 0
Вход 1
Вход 2
Выход[/right]


=== trans/options_comment_wire ===

$96449970906640* Добавить комментарий к проводу


=== trans/panel_mux_output ===

$15170071160680* Выход


=== misc/factory_back ===

$98930461722118* Возврат к уровню


=== trans/options_animation_speed ===

$13442839894535* Скорость анимации


=== trans/panel_equal_input ===

$51485224340167*
[right]Вход 0
Вход 1[/right]


=== dyn_lib/backend/board/update_visuals ===

$32087108522443* Выводы с размером могут подключаться только к другим выводам с размером
$14665712485657* Этот пользовательский компонент не может быть использован так как у него нет компонентов.
$45678915971282* Короткое замыкание внутри [url={url}]этого[/url] пользовательского компонента.
$18868256335352* Циклическая зависимость - вывод компонента возвращается на вход. [url=page~Circular dependency]Читать больше[/url]
$27322222841583* Короткое замыкание между {comp_1} и {comp_2}
$34250342055215* Компонент на запрещённой позиции.
$25337574230078* Два выхода в одном квадрате.
$13543997680790* Короткое замыкание между {comp} и пользовательским компонентом.
$93282551789227* Это сохранение из старой версии игры создайте новое сохранение схемы из меню слева наверху.
$95056157627313* Для решения этого уровня вам необходимо использовать компонент "Выключаемый Вход".
$15549447390000* Несколько компонентов входа/выхода находятся в одном квадрате. Этот компонент невозможно будет использовать, так как два подключения не могут быть в одном месте.
$12256736989028* У вас более одной пробы(зонда) в одном квадрате.
$30046555580949* Короткое замыкание между {comp} и пользовательским компонентом.
$12249248261034* Для решения этого уровня вам необходимо использовать компонент "Выключаемый Выход"
$51658715167745* Короткое замыкание между {comp_1} и {comp_2}


=== trans/level_bit_switch_RichTextLabel2 ===

$57920867194992*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== trans/manual_sprite_display ===

$28358052747011*
Экран спрайтов имеет разрешение 640x480 пикселей. Прежде чем использовать экран спрайтов, вам необходимо прикрепить карту спрайтов, которая является изображением PNG и содержит все ваши спрайты. Нажмите на компонент и установите карту спрайтов в панели компонентов.

Первый контакт входа это [color=#e49f44]Тип команды[/color], значение следующих 3 контактов зависит от типа команды, как показано ниже. Идентификатор спрайта всегда представляет собой 8-битное число, а все остальные значения (позиция и размер) всегда представляют собой пары 16-битных значений.

[table=2]
[cell]0[/cell] [cell]Нет команды[/cell]
[cell]1[/cell] [cell][color=#e49f44]Загрузить спрайт[/color] (Спрайт ID, Смещение в изображении, Размер изображения)[/cell]
[cell][/cell][cell][i]Установить спрайт этого ID.[/i][/cell]
[cell]2[/cell] [cell][color=#e49f44]Установить позицию[/color] (Спрайт ID, Позиция на экране)[/cell]
[cell][/cell][cell][i]Устанавливает X и Y координаты загруженного спрайта.[/i][/cell]
[/table]

[center][img=300]dialogue/manual/sprite_screen.png[/img][/center]

Обратите внимание, что спрайты накладываются по их ID. Для удаления слоя просто загрузите спрайт с шириной и высотой 0.


=== trans/panel_cond_input_1 ===

$99239506734191* Бит 1:


=== component_panels/initialize ===

$46968113642805* Ассемблер
$31768884566341* Файл
$77135072182116* Нули
$72909892309553* Перфокарта


=== trans/panel_rom_setting_labels ===

$58506507470977* [right]Размер (байт)[/right]


=== trans/panel_splitter32_output ===

$78641735308147*
Слово 1
Слово 2
Слово 3
Слово 4


=== misc/menu_schematic_hub ===

$13921098180953* Центр схем


=== trans/panel_not_description ===

$36935580253321* [center]Побитовое инвертирование входных данных[/center]


=== ui/toggles/level_log ===

$38557550573896* Диалог уровня


=== misc/instruciton_rule_label ===

$70464083627337* Метка


=== dialogue/schematic_hub ===

$22639280459994* Закачка списка...


=== misc/change_schematic ===

$79554853897000* Сменить схему


=== trans/panel_neg_input ===

$92219875545393* [right]Вход[/right]


=== misc/continue ===

$93610185550877* Продолжить


=== trans/level_byte_mux_description ===

$20538476756633* [center]Вывести корректный вход[/center]


=== trans/panel_decoder2_input ===

$31844862767401*
[right]Вход 0
Вход 1[/right]


=== trans/options_cluster_color ===

$77850745497963* Применить цвет к группе проводов


=== trans/panel_program_1inputs_label ===

$85358271811851* [right]Исправить связные компоненты[/right]


=== trans/level_program_description ===

$44017405175202* [center]Добавьте счётчик и программный компонент в вашу схему.[/center]


=== misc/menu ===

$56916384895438* Главное меню


=== trans/level_odd_ticks_RichTextLabel3 ===

$89508766742523*
[right]Вход
Ожидаемый выход
Текущий выход[/right]


=== levels/xor ===

$16047615798435* [center]Прочитайте входные данные дважды и выполните операцию ИСКЛ-ИЛИ(XOR).[/center]


=== misc/save_schematic ===

$36331525379247* Сохранить схему


=== trans/manual_simulator ===

$19932404521621* Симулятор


=== component_panels/inc_output ===

$10036949679587* Результат


=== trans/panel_not_output ===

$74796974148718* Выход


=== trans/options_colorblind ===

$49806848871093* Режим для дальтоников


=== trans/panel_decoder1_description ===

$77460843937727* [center]Включить 1 выход в зависимости от входа[/center]


=== trans/panel_register8_inputs ===

$13844216291005*
[right]Загрузка
Сохранение
Значение[/right]


=== trans/panel_output ===

$19698504808819*
Результат
Переполнение


=== components/InputConditions ===

$71663355611979* НИКОГДА
$84163806515429* =0
$63748269806736* <0
$71425442219836* ≤0
$53856166132912* ≥0
$48141874604871* ВСЕГДА
$73802979424247* ≠0
$45382684265289* >0


=== trans/level_dependency_description ===

$81238724438578* Сделайте схему, где вход компонента зависит от его собственного выхода


=== trans/level_byte_or_text ===

$99465606386164*
[right]
[color=#e49f44]Вход[/color]
Желаемый выход
Текущий выход
[/right]


=== levels/the_bus ===

$72472660427162* [center]Скопируйте значение из входа {input_nr} в выход {output_nr}[/center]
$85140574084420* [center]Скопируйте значение из правильного входа в правильный выход[/center]


=== dialogue/goto_go ===

$74655304819955* Идти


=== component_panels/ror_input1 ===

$90811757746072* Значение


=== trans/level_sorter_description ===

$60186094365455* Сортировка значений


=== dialogue/schematic_hub/search_button ===

$99419261731746* Поиск


=== trans/panel_input_input_1 ===

$82781946969262* Вход 2


=== trans/manual_keynote_the_robot ===

$90224489436893* [center]Используйте клавиши со стрелками, чтобы поиграть[/center]


=== trans/level_byte_mux_text ===

$44961981616677*
[center]Ваш ответ 11 + 88 =  0
Правильный ответ 11 + 88  = 99[/center]


=== ui/verilog_format_options ===

$61009819785587* Ничего


=== trans/options_pan_up ===

$80031998727851* Двигаться вверх


=== dialogue/link_register_count ===

$80671166875996* Количество регистров:


=== trans/level_constants_text ===

$29779449172278*
[right][color=#e49f44]Код
Вход[/color][/right]


=== trans/level_byte_adder_question2 ===

$85899338356278*
[right]Правильный ответ

Ваш ответ[/right]


=== misc/delay_overlay ===

$85430022417382* Показать задержку


=== trans/level_complete_signed_numbers ===

$41649402437253*
[b]Отрицательные числа[/b]
[color=#cccccc][i]Переключить между числами со знаком и без знака[/i][/color]


=== trans/level_complete_stat_tick ===

$47758922161853* Такт


=== trans/levels_not_RichTextLabel3 ===

$48425594158515* Постройте НЕ(NOT) элемент


=== trans/level_codes_description ===

$24678249110160* [center]Добавьте АЛУ(ALU) в вашу схему[/center]


=== trans/options_synced ===

$99411066573242* Синхронизировано


=== trans/text_truth_table_left ===

$58617980046951*
[right]Вход 1
Вход 2
Выход[/right]


=== trans/panel_program8_1_input ===

$36858295122746* [right]Адрес[/right]


=== dialogue/schematic_hub/load ===

$41294322771286* Загрузить
$44524092309946* Загрузка...


=== trans/level_signed_negator_labels3 ===

$66996894079719* Желаемый   Нынешний


=== trans/panel_rom_setting ===

$99326144894013* Настройки


=== dialogue/assembler/view_specifications ===

$50231740999721* Ассемблер


=== dialogue/size_option_tip ===

$50208046910621* Размер данных загрузки из статического значения


=== trans/panel_segment_value ===

$97585846659258* [center]Значение[/center]


=== trans/manual_delay ===

$78806697204524* Задержка


=== trans/panel_constant_output ===

$14868502983738* Выход


=== trans/panels_bidirectional_set_z_label ===

$50319299760169* Нет входа:


=== component_panels/index2 ===

$56803298742847* Ширина вывода


=== trans/panel_segment_enable ===

$14963127967678* [center]Включено[/center]


=== trans/rpg_alloy_enter ===

$47375100278801* [center]НАЖМИТЕ СБРОС(RESET) ЧТОБЫ ПОПРОБОВАТЬ СНОВА[/center]


=== trans/level_complete_stat_sum ===

$99546064626994* Счёт


=== levels/crude_awakening/next_level ===

$24027424800887* Следующий уровень


=== trans/level_alu2_description ===

$37432913848309* [center]ИЛИ(OR), НЕ-И(NAND), НЕ-ИЛИ(NOR), И(AND), ПЛЮС(ADD) или МИНУС(SUB) байт вместе[/center]


=== component_panels/output8_output ===

$41586309689603*
Слово 1
Слово 2
Слово 3
Слово 4
Слово 5
Слово 6
Слово 7
Слово 8


=== trans/level_complete_stat_gate ===

$95192766583497* Элементы


=== levels/signed_negator ===

$10866019808027* Для этого уровня вы, вероятно, захотите включить числа со знаком, чтобы старший бит отображался как -128. Нажмите "+255" на верхней панели.


=== trans/level_circumference_subscript ===

$80632450818467* [center][color=#cccccc](Примерно π ≈ 3)[/color][/center]


=== trans/panel_output_output_0 ===

$44355002441998* Выход 1


=== trans/overwrite_discard ===

$78824878529707* Отменить


=== levels/ram_component ===

$32676754026463* Сохранить {value} и загрузить
$30856781458049* Сохранить {value}
$14259545926196* A
$16217965518477* B
$18084166025569* Ничего
$13644027370563* Загрузить


=== trans/options_missing ===

$22687523145097* Отсутствует


=== levels/decoder2_description ===

$23891467304793*
[right][color=#e49f44]Вход 0
Вход 1[/color]
Ожидаемый бит[/right]


=== trans/manual_delay_text ===

$52013630755752*
В реальном оборудовании все компоненты имеют задержку. Это важно, поскольку задержка в цепи определяет максимальную скорость, с которой вы можете ее запускать.

Прослеживание проводов от входа к выходу и добавление задержки компонентов на пути даст вам задержку этого пути. Задержка цепи это задержка самого медленного пути.

Кроме входов, пути также могут начинаться от компонентов без круглых контактных входов (таких как Счетчик и Вкл) и могут заканчиваться на оранжевых контактах.

Кроме того, у пользовательских компонентов нет оценки задержки для самого затратного пути всего компонента, вместо этого задержка рассчитывается по каждому контакту. Это сделано для того, чтобы не наказывать за использование пользовательских компонентов, делая более быстрые контакты с такой же стоимостью, как и более медленные.


=== trans/level_xnor_RichTextLabel2 ===

$59451104901430*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== trans/options_language_disclaimer ===

$72959997258737* Чтобы изменения языка вступили в силу, необходимо перезапустить систему.


=== trans/panel_fileloader_offset ===

$78662357115684* [right]Смешение[/right]


=== ui/options/Controls ===

$53266310714298* Управление


=== trans/level_ram_component_value_description ===

$53113984441582*
[right]Тест
Адрес
Действие
Ожидаемый выход[/right]


=== trans/level_byte_less_description ===

$37336202055283* [center]Определите, меньше ли первое входное значение второго.[/center]


=== ui/state_ui/title_screen/play ===

$66967233942803* Кампания


=== trans/panel_console_settings ===

$32422980821351* Шрифт


=== dialogue/manual/Endianness ===

$81201674300570* Порядок байт


=== component_panels/register_inputs3 ===

$99385455111899* Значение


=== trans/panel_and ===

$48633048126675*
[right]Вход 0
Вход 1
Выход[/right]


=== trans/panel_inputlevel_input ===

$27464111307888* Вход


=== misc/credit_box ===

$15872341864658*
Искренняя благодарность:

[b]Переводчикам[/b]
{translators}

[b]Ранним бета-тестерам[/b]
{beta_testers}

[b]Кто работал со шрифтами[/b]
{font_work}

[b]Музыка[/b]
 Aarón F. Bianchi

[b]Свободное и открытое ПО[/b]
{software}

[b]Ресурсам[/b]
{assets}


=== trans/component_output_car_label ===


#  Label appears on the component and must be 3 letters or less
$42054040513351* CAR


=== trans/level_flood_enter ===

$64481408588810* Нажмите ВВОД чтобы показать воду


=== trans/panel_matrix_input1 ===

$94408716277517*
[right]Включить Y
Цвет[/right]


=== trans/panel_outputlevel_output ===

$16896928682474* [right]Выход[/right]


=== trans/manual_ASCII_encoding ===

$30404865580119* ASCII кодировка


=== trans/options_pan_right ===

$33884219481037* Двигаться вправо


=== misc/expectations_toggle ===

$78508488734457* ВКЛ
$97697026280362* ВЫКЛ
$58021874775869* Переключение состояния:


=== trans/options_pan_left ===

$78515694621006* Двигаться влево


=== trans/panel_hdd_size2 ===

$82587023815880* Размер (64 бит):


=== dialogue/label ===

$17200446925126* Запуск на такте:


=== trans/not_gate_RichTextLabel2 ===

$10340875578771*
[right][color=#e49f44]Вход[/color]
Желаемый выход
Текущий выход[/right]


=== high_memory ===

$20174696978925* Настройки, которые вы выбрали для этого компонента, займут {size} {resource} на вашем компьютере. Вас это устраивает?


=== trans/instructions_header ===

$15089281203426* [center]Инструкции[/center]


=== trans/panel_splitter8_input ===

$90934251511339* [right]Вход[/right]


=== trans/options_controls ===

$18297012748869* Управление


=== levels/Counter ===

$17701404772563* Добавьте 1
$68874699768861* Перезапишите значением {value}


=== trans/panel_bitmemory_outputs ===

$17509974261453* Выход


=== trans/manual_text_ram ===

$10969790213397*
Этот симулятор имеет несколько типов оперативной памяти с различными компромиссами, аналогично реальным вариантам оперативной памяти.

[b]RAM[/b]
Компонент RAM может хранить большое количество данных, но добавляет очень высокую задержку в цепь.

[b]Fast RAM[/b]
Быстрая(Fast) оперативная память имеет низкую задержку, но очень высокую стоимость логических элементов за байт.

[b]Latency RAM[/b]
Обычная оперативная память имеет очень высокую задержку(Latency), однако вместо того, чтобы ждать этой задержки каждый такт, мы можем рассматривать оперативную память так, как будто загрузка и сохранение занимают несколько тактов. Количество тактов, которое потребуется для сохранения и загрузки, будет зависеть от длины каждого такта. Например, если наша цепь имеет задержку 100 единиц, загрузка займет 10 тактов, поскольку нам нужно подождать примерно 1000 единиц задержки.

Распространенный подход для конвейерных архитектур - использовать оперативную память с задержкой в качестве основной памяти, но и использовать небольшое количество быстрой оперативной памяти для кэширования. Поскольку адреса доступа к памяти часто соседние или близкие (например, при переборе массива), извлечение соседних значений при загрузке из оперативной памяти с задержкой и кэширование их в быстрой оперативной памяти может значительно ускорить определенные виды программ.

Самый простой способ интеграции оперативной памяти с задержкой это просто приостановить всю архитектуру, ожидая сохранения или загрузки. Легкая оптимизация заключается в том, что вы не должны ждать сохранения, если не хотите загружать.

[b]Dual Load RAM[/b]
Иногда полезно разделить части логики на отдельное вычислительное устройство, которое работает более или менее независимо. Это может быть необходимо для обработки устройства отображения или сетевого соединения. В таких случаях независимое устройство часто будет нуждаться в непрерывной загрузке и сохранении в память, в то время как внешней логике нужно будет лишь периодически загружать данные. Используйте оперативную память с двойной загрузкой, чтобы избежать необходимости планировать, кто получает доступ к оперативной памяти в какое время.


=== trans/panel_not_input ===

$96578192050623* [right]Вход[/right]


=== trans/level_tick_tock_keys ===

$11700778730606*
[right][color=#e49f44]Действие
Желаемый выход
Текущий выход[/color][/right]


=== component_panels/sprite_display_select_button ===

$18632189666863* Выбор файла


=== trans/rpg_no_signal ===

$33720960099059* Нет сигнала


=== trans/manual_text_ascii_encoding ===

$57727768059917* Этот симулятор использует (расширенный) ASCII в нескольких местах. Ниже приведены символы с соответствующими им номерами. Консоль поддерживает различные версии расширенного ASCII.


=== trans/panel_regred_output ===

$59910806432617* Выход


=== levels/circular_dependency_check ===

$25155953943906* Правильно!
$32314337981189* Проверка
$73467991035922* Нет!
$22446480186064* Создайте циклическую зависимость не менее чем из двух компонентов


=== trans/panel_fulladder_description ===

$25711866218405* [center]Добавлено 3 входа[/center]


=== trans/manual_text_short_circuit ===

$31105471890701*
В электронике два компонента, выдающие разные значения на одном и том же проводе, вызывают короткое замыкание.

[center][img=100]res://dialogue/short_circuit.png[/img][/center]

Однако, отключая выходные контакты от провода, можно сделать так, чтобы несколько контактов совместно использовали один и тот же провод (называемый шиной). Важно, чтобы в каждом такте оставался подключенным не более 1 выхода компонента, в противном случае вы рискуете получить короткое замыкание.

[center][img]res://dialogue/switch.png[/img][/center]

В этом симуляторе отсоединённые контакты отмечены серым цветом.


=== trans/panel_rol_output ===

$62960066333763* Выход


=== trans/manual_assembly ===

$14434902453525* Ассемблер


=== trans/nand_values ===

$38006065064488*
[right][color=#e49f44]Вход 1
Вход 2[/color]
[b]Выход[/b][/right]


=== levels/decoder ===

$18435544383511* АЛУ шаблон\n[OFF] [ON] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$15105859227432* КОПИЯ шаблон\n[ON] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$11382827588408* СОСТОЯНИЕ шаблон\n[ON] [ON] [OFF] [OFF] [OFF] [ANY] [ANY] [ANY]
$12976424717611* ЧИСЛО шаблон\n[OFF] [OFF] [ANY] [ANY] [ANY] [ANY] [ANY] [ANY]
$10169248860836* Декодер инструкции


=== trans/complete_flower_4 ===

$86527701695205* [center]НАЖМИТЕ ЛЮБУЮ КЛАВИШУ ДЛЯ ПРОДОЛЖЕНИЯ[/center]


=== trans/map_locked ===

$95146987030704* Заблокировано


=== component_panels/indexer_index ===

$96690220345202* [center]Выражение[/center]


=== levels/call_ret/no ===

$90567812500955* Нет
$82611295916141* Мы о вас были лучшего мнения


=== trans/level_signed_negator_description ===

$87777776285772* [center]Инвертируйте знак в числе[/center]


=== trans/manual_truth_tables ===

$75695254533352* Таблицы истинности


=== trans/options_effects_volume ===

$24145565754506* Громкость эффектов


=== trans/panel_maker64_input ===

$13840394126541*
[right]Слово 1
Слово 2
Слово 3
Слово 4
Слово 5
Слово 6
Слово 7
Слово 8[/right]


=== trans/ui_export_success ===

$97849993500646* Экспорт успешен


=== main_scripts/overture_level ===

$11338791453100* Динамика

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$85842797287714* Р4
$92808834805287* Скопируйте ВХОД в ВЫХОД

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$81103754316448* ВХ

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$39748815905832* Р2

#  "cond" is for condition, this label has to be 4 letters or less as it has to fit on a component
$94982725578534* УСЛ
$93579176707338* Скопируйте ВХОД ({input_val}) в РЕГ {reg}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$49076331369118* Р5
$95699170830383* Число {nr} в РЕГ 0
$90667501138629* Если REG 3 ≥ 0, счётчик = {val}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$28690475492473* ВЫХ
$19724825417529* Скопируйте РЕГ {n1} в РЕГ {n2}
$76213462280109* Если РЕГ 3 > 0, счётчик = {val}
$56098077111355* Если РЕГ 3 ≠ 0, счётчик = {val}
$36131297419794* Никогда не писать в счётчик (Ничего не делать)
$75122220982708* Скопируйте РЕГ {n1} в ВЫХОД
$51029568177086* Если РЕГ 3 < 0, счётчик = {val}

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$73538301913919* Р0

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$80997977734042* Р3

#  Keep as short as possible as it has to fit on a component. 2 characters preferably, but 3 if you must
$37653426314061* Р1
$51099912089198* Счётчик = {val}
$16914143080303* Скопировать
$50124579293905* Если РЕГ 3 ≤ 0, счётчик = {val}
$59042824277105* Число
$23384670264323* Если РЕГ 3 = 0, счётчик = {val}
$82949244692745* Вычислить


=== levels/negative_numbers ===

$13872783467999* Знаковое двоичное {number}?
$97450409600317*
[b]КЛЮЧЕВЫЕ МОМЕНТЫ[/b]

1. Чтобы перейти от отрицательного к положительному значению, нужно инвертировать все биты и добавить 1.
2. Если старший бит [ON], значение всегда отрицательное.
3. Сумматор байтов, который вы построили, также работает с знаковыми числами.
4. По-прежнему существует только 1 способ записать каждое число.
$37471385247951* Отличная работа, вы достигли уровня {current_level}.


=== trans/panel_console_offset ===

$24810778105207* [right]Смешение[/right]


=== levels/NAND Gate ===

$18270083417453* Проверка
$19208664264770* [b]Инструкция:[/b]\nНажмите любую серую кнопку в последней строке таблицы внизу.
$17994568832660* [b]Инструкция:[/b]\nКомпонент И-НЕ(NAND) переключает потоки в электрической цепи.\nИспользуйте переключатели слева для экспериментов с Входами.\nПонаблюдайте как это влияет на потоки и Выход,\nа затем заполните последнюю строку в таблице внизу.


=== trans/options_copy ===

$55679445263875* Скопировать


=== trans/panel_delayline1_input ===

$25839180359382* [right]Вход [/right]


=== trans/panel_network_inputs ===

$37324411363753*
[right][color=#e49f44]Команда[/color]
IP / Соединение ID
Данные / Порт
Длина данных[/right]


=== levels/dependency ===

$16336401898647* Тест 1/2
$13880985462901* Создайте схему, где вход компонента зависит от его собственного выхода.
$74003370318715* Проверка


=== trans/tooltip_tooltip ===

$48829429502039*
[b]Быстрый запуск[/b]
[color=#cccccc][i]Запускает ваш компьютер без обновления графики каждый тик[/i][/color]


=== trans/nand_Label2 ===

$60885816586685* Выход


=== trans/options_pan_down ===

$93140495547084* Двигаться вниз


=== trans/panel_nand_description ===

$95680138985553* [center]Побитовое НЕ-И(NAND) двух входов[/center]


=== trans/splitter8_output ===

$69714402466566*
Бит 1
Бит 2
Бит 3
Бит 4
Бит 5
Бит 6
Бит 7
Бит 8


=== trans/options_reset_warning ===

$19141523477461*
Это удалит все решения уровней, пользовательские компоненты и архитектуры. Это действие нельзя отменить, вы уверены, что хотите это сделать?
(Это закроет игру, она будет сброшена после повторного запуска.)


=== dialogue/schematic_hub/order_by ===

$69981201197158* Набирает популярность
$70134513915163* Новое
$87115430626073* Мои выгрузки
$56045953383535* Архитектуры
$25536941657464* Компоненты
$43488408276984* Популярное


=== trans/level_full_adder_RichTextLabel2 ===

$25766177620842*
[right][color=#e49f44]Вход 1
Вход 2
Вход 3[/color]
Желаемая Сумма
Желаемый Перенос
Текущая Сумма
Текущий Перенос[/right]


=== levels/hex_racer ===

$92057009138253* {number} в hex?
$87016829502381* Отличная работа, вы достигли уровня {current_level}.


=== trans/map_arithmetic ===

$51337598329530* АРИФМЕТИКА


=== trans/options_general_tps ===

$67431112882119* Показать актуальную скорость


=== trans/rotate ===

$88236351843942* Повернуть


=== trans/manual_de_morgan ===

$20250843622435*
Таблицы истинности четырех основных логических вентилей симметричны. Вы можете переключаться между ними, [b][color=#6e9759]инвертируя вход[/color][/b] (вертикальные стрелки) или [b][color=#596197]инвертируя выход[/color][/b] (горизонтальные стрелки), как показано на графике ниже.

[center][img=400]dialogue/manual/de_morgan.png[/img][/center]

Заметки
[table=2]
[cell]1 [/cell][cell]Вы можете перейти от любого базового вентиля к любому другому, максимум что вам нужно сделать, это поставить NOT(НЕ) на оба выхода и входа[/cell]
[cell]2 [/cell][cell]Для перехода между ИЛИ(OR) и ИЛИ-НЕ(NOR) вам требуется инвертировать выход. Аналогично с И(AND) и И-НЕ(NAND). Обратите внимание, что форма компонентов ИЛИ/ИЛИ-НЕ идентична, за исключением маленькой точки на конце, которая означает НЕ. И/НЕ-И также идентичны, за исключением этой точки.[/cell]
[cell]3[/cell][cell]Инвертирование выхода изменяет все биты в последней строке таблицы истинности. Инвертирование входов отражает последнюю строку таблицы истинности вокруг центра.[/cell]
[/table]


=== trans/rpg_alloy_description ===

$29268002047995*
[center] [color=#eb5260]БУУМ![/color]

Все погибли
[/center]


=== trans/level_dance_description ===

$29803992718733* Создайте танцевальные движения


=== levels/delay_level_check ===

$59355217078543* Успех!
$68999077595244* Проверка
$90847326020954* Нет!


=== trans/options_color_wire ===

$64341547590822* Применить цвет к проводу


=== trans/panel_fileloader_enable ===

$80528055112236* [center]Включено[/center]


=== misc/program_edit_signals ===

$98772447663910* Связь компонентов


=== misc/credits ===

$15234594767991* Титры


=== main_scripts/levels ===


#  Level type for the level complete menu
$58769207148712* Компонент

#  Level type for the level complete menu
$90134890578411* Остальное
$68327708695625* [b]Документация[/b]\n\n Раздел: [color=#68d277]{page}[/color]

#  Level type for the level complete menu
$69219742310717* Архитектура


=== trans/panel_decoder3_disable ===

$50918319838744* Отключено


=== trans/level_decodre_RichTextLabel2 ===

$40723962298647*
[right][color=#e49f44]Вход 1
Вход 2
Вход 3[/color]
Желаемый бит
Текущий бит[/right]


=== trans/manual_bytes ===

$46223559629673* Байты


=== trans/manual_matrix_display ===

$86092436010494* Матричный дисплей


=== trans/options_music_volume ===

$93981778736076* Громкость музыки


=== trans/panel_ram8_output ===

$90649838965927* Выход


=== trans/level_complete_ide ===

$56719825235196*
[b]КОДЫ РЕДАКТОРА[/b]
[color=#cccccc][i]Именование кодов и редактирование в удобном редакторе[/i][/color]


=== trans/panel_cond_input_2 ===

$82398835019064* БИТ 2:


=== trans/level_alu2_code ===

$93157894815498* [center]ИЛИ(OR)[/center]


=== misc/binary_submit ===

$95509904060545* Подтвердить


=== trans/and_gate_3_RichTextLabel2 ===

$52008707927408*
[right][color=#e49f44]Вход 1
Вход 2
Вход 3[/color]
Желаемый выход
Текущий выход[/right]


=== trans/panel_nand ===

$51470292662088*
[right]Вход 0
Вход 1
Выход[/right]


=== trans/panel_mul_input ===

$52124868557994*
[right]Вход 0
Вход 1[/right]


=== trans/share_prompt_bbcode_tags ===

$51065735869890*
Поддержка BBcode меток: 
URL: [url]https://turingcomplete.game[/url]
Monospace: [code]01011101[/code]


=== trans/options_level ===

$64744152268407* Уровень


=== trans/level_complete_stat_type ===

$69511102367948* Тип


=== trans/panel_or_input ===

$70466834507347*
[right]Вход 0
Вход 1[/right]


=== trans/assembly_editor_header ===

$14116831487331* Ассемблер


=== trans/options_paste ===

$52159578521318* Вставить


=== trans/level_double_buffer_RichTextLabel3 ===

$27208335953837*
[right]Вход
Желаемый выход
Текущий выход[/right]


=== trans/hub_stats ===

$30942143953871* Пользователь


=== trans/manual_text_truth ===

$16559670174521*
Таблицы входов и выходов, которые используются повсюду в игре, обычно известны как таблицы истинности.








"Вход " и "Выход" часто будут представлены с помощью имен переменных, как в алгебре. И вместо использования цветов, вы часто увидите значения, представленные как 0 / 1 или Ложь(False) / Истина(True).


=== trans/manual_recipe_Label ===

$30773017984502*
Большинство [color=#dd6576][url=Circular dependency]циклических зависимостей[/url][/color] являются хаотичными, не полезными и возникают по ошибке. Тем не менее, есть несколько полезных исключений. Учитывая, что они включены в меню опций, этот симулятор позволяет некоторые из них.

[b]Nor-затвор[/b]
NOR-затвор хранит 1-битное значение, которое всегда доступно на проводе [b]Q[/b].
[center]
[table=3]
[cell]   [b]S[/b]  [/cell][cell]      [b]R[/b]     [/cell][cell]Действие[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Нет изменений[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Значение = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Значение = [img]dialogue/on.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Ошибка[/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/nor_latch.png[/img]
[/center]

[b]Nand затвор[/b]
NAND-затвор хранит 1-битное значение, которое всегда доступно на проводе [b]Q[/b].
[center]
[table=3]
[cell]   [b]S[/b]  [/cell][cell]     [b]R[/b]     [/cell][cell]Действие[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Ошибка[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Значение = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Значение = [img]dialogue/on.png[/img][/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Нет изменений[/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/nand_latch.png[/img]
[/center]

[b]And Or затвор[/b]
And or затвор хранит 1-битное значение, которое всегда доступно на проводе [b]Q[/b].
[center]
[table=3]
[cell]   [b]H[/b]  [/cell][cell]     [b]R[/b]     [/cell][cell]Действие[/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Значение = [img]dialogue/off.png[/img][/cell]
[cell]  [img]dialogue/off.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Ошибка[/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/off.png[/img][/cell][cell]Нет изменений[/cell]
[cell]  [img]dialogue/on.png[/img][/cell][cell] [img]dialogue/on.png[/img][/cell][cell]Ошибка = [img]dialogue/on.png[/img][/cell]
[/table]                    [img=150]dialogue/manual/circular_recipes/and_or_latch.png[/img]
[/center]


=== misc/onwards ===

$51096427131653* Дальше


=== trans/panel_equal_description ===

$66334667083051* [center]Проверьте если Вход 0 и Вход 1 одинаковые[/center]


=== ui/toggles/race_condition ===

$75558678297830* Состояние гонки


=== trans/manual_text_terminology ===


# DateCustoms
$99266452352883*
[b]Инструкция[/b]
Байт или несколько байтов, которые вместе заставляют компьютер выполнять конкретное действие.

[b]Opcode (код операции)[/b]
Часть инструкции, которая определяет, какая операция (например, СЛОЖЕНИЕ(ADD) или И(AND)) должна быть выполнена.

[b]Адрес памяти[/b]
Число, используемое в качестве имени для ячеек памяти (часто для регистров). Эти адреса используются для указания, откуда инструкция должна загружать данные или куда хранить данные.

[b]Прыжок(Jump)[/b]
Изменение значения счетчика программы, изменяющее, какая инструкция будет загружена следующей.


=== misc/multi_select ===

$85147529532131* Множественный выбор (SHIFT и перетащите)


=== trans/level_byte_less_i_description ===

$21195810950441* [center]Определите, меньше ли первое входное значение второго.[/center]


=== trans/hub_order_by ===

$83319579232915* Сортировать по


=== trans/component_panel_latency_RichTextLabel2 ===

$69616616373323*
Задача завершена
Рабочих тактов осталось
Выход


=== trans/panel_segment_info ===

$64695289448271* Каждый из 8 битов значения включает одну из 8 областей дисплея.


=== trans/manual_text_universal_gates ===

$37735744928195*
Оказывается, что всю логику компьютера можно построить только из вентилей И-НЕ(NAND) или ИЛИ-НЕ(NOR). Компьютеры навигации Apollo были полностью построены на вентилях ИЛИ-НЕ(NOR). Разработанные в шестидесятых, они имели всего 4 КБ ОЗУ и 32 КБ дискового пространства, но тем не менее направили астронавтов на Луну.

Современные компьютеры не строятся исключительно из одного универсального вентиля, но, когда это возможно, предпочтение отдается вентилям И-НЕ(NAND), так как они имеют меньшую задержку и занимают меньше места.


=== dyn_lib/backend/board/schematics ===


#  Decoder pin name
$80846046332059* УСЛОВИЕ
$25378963142694* Вход 2
$48524980499900* ЗНАЧЕНИЕ
$23343928938611* ВЫЧИСЛЕНИЕ
$80984147393241* OPCODE
$25947122599583* PUSH
$21762287720058* Стандартно
$52720470197560* Условие
$69871887031160* Результат
$17900992684779* Вход
$98979865390652* ВЫХОД
$30360644331285* POP
$97114869841400* Выход
$15697933732634* Инструкции
$50176996454102* ЧИСЛО
$38100656631435* КОПИРОВАТЬ
$47025412277453* Вход 1


=== component_panels/Little endian ===

$95419083709418* [right]Младший порядок байт[/right]


=== misc/component_button ===

$75542474510177* ЭЛЕМЕНТЫ
$20148770258379* Область без компонент
$53184531022842* Песочница только
$40492377880609* Контакты перекрыты
$63839315669055* ЗАДЕРЖКА


=== trans/inputlevel_enable ===

$28654406516589* [center]Отключить / Включить[/center]


=== trans/panel_keyboard_event ===

$67549215280299* Ожидание события


=== misc/bit ===

$64638046836093* бит


=== dialogue/manual/Assembler ===

$72576103282837* Ассемблер


=== trans/panel_divmod_input ===

$48801764966719*
[right]Делимое
Делитель[/right]


=== trans/levels_byte_or_description ===

$68379799788575* [center]Побитовое ИЛИ(OR)[/center]


=== trans/panel_index_bit_index ===

$96885367697181* [right]Индекс[/right]


=== trans/panel_output_output_1 ===

$38712851498419* Выход 2


=== misc/skipped_custom ===

$38174137226538* Выбор компонент

#  This is the text on a button that appears when a custom component has changed size and no longer fits in a schematic. You can press this button to make the camera go to the location where the custom component was
$99860977387728* Показать компонент


=== trans/panel_counter16_output ===

$13295622648285* Выход


=== misc/button_next ===

$80746616574054* Следующий (F5)


=== ui/toggles/level_map ===

$71951682957395* Карта уровней


=== levels/saving_bytes ===

$13502950630653*
[color=#ff9800]НИЧЕГО
0
0[/color]
$16372198430230* СОХРАНИТЬ
$15498440508450* Не делать ничего
$15582618410991* ЗАГРУЗИТЬ И СОХРАНИТЬ
$18873598212433* ЗАГРУЗИТЬ


=== main_scripts/leg_level ===

$70383685548547* РЕГ {nr}
$20104629254326* АРГУМЕНТ 2
$65642901654732* {component} должен быть выключен
$98778676892898* {component} должен быть включён с значением {value}
$14186606871089* Следующее значение счетчика тиков будет {wrong_value}, но должно быть {value}
$27868897434461* Не могу найти компонент счётчик
$37810243909140* СЧЁТЧИК
$38681417496680* АРГУМЕНТ 1
$43723329256095* РЕГ {nr}
$50722296752142* ВХОД
$24003300271049* {component} должен иметь значение {value}, но там {wrong_value}
$60997201855346* РЕЗУЛЬТАТ
$50231510806554* Не могу найти программный компонент
$49810487048038* СЧЁТЧИК
$18236360532765* ВЫХОД
$20950946171790* ПРЫГНУТЬ НА
$84307766381146* OPCODE


=== levels/call_ret ===

$15463931654475* [center]Добавьте "call"(вызов) и "ret"(возврат) инструкции[/center]


=== trans/panel_ram_fast_input ===

$56589507270526*
[right]Загрузить
Сохранить
Адрес
Значение[/right]


=== trans/manual_computer_concepts ===

$60892983318818* Компьютерные концепции


=== trans/panel_ram8_input ===

$54796685972031*
[right]Загрузить
Сохранить
Адрес
Значение[/right]


=== trans/level_complete_delay ===

$73470840319057*
[b]Задержка[/b]
[color=#cccccc][i]Теперь вы можете просматривать задержку проводов и компонентов.[/i][/color]


=== trans/panel_regredplus_output ===

$33621557361089*
Загрузить вывод
Сохранить вывод


=== trans/panel_shr_input ===

$98628213136355*
[right]Значение
Сдвинуть на[/right]


=== trans/level_byte_no_description ===

$19806403089477* [center]Инвертировать каждый бит[/center]


=== trans/panel_ram_fast_output ===

$93723953854950* Выход


=== dyn_lib/backend ===

$98703677236827* 1 минута назад
$86244493049244* {hours} часов назад
$10792411581963* {size} MB
$95018143828198* 1 год назад
$21685594109067* сейчас
$98363990684104* 1 час назад
$84076931764831* 1 день назад
$58374689721038* БАЙТ
$98683857303458* {size} байт
$86391754618645* {size} KB
$18300496139706* 1 месяц назад
$35365941085084* {name} assembly
$17901039729248* {months} месяц(ев) назад
$31567406591202* 1 байт
$42553566189409* {minutes} минут назад
$70945526841433* {years} лет назад
$22729457392140* {size} GB
$14036822471924* {days} дней назад


=== trans/level_saving_gracefully_RichTextLabel3 ===

$74117520663650*
[right][color=#e49f44]Сохранить
Значение[/color]
Желаемый выход
Текущий выход[/right]


=== levels/call_ret/completed ===

$65495857744236* Уровень завершён
$82323203550887* Мы можем вам доверять?


=== misc/select_color ===

$97461374731210* Цвет Провода


=== trans/manual_text_instructions ===

$24791538034329*
То, что эта игра называет "инструкцией", также известно как операция или опкод (opcode, сокращение от operation code). Независимо от операционной системы, языка программирования или любых других уровней, всё программное обеспечение в конечном итоге должно быть сведено к инструкциям, которые процессор может обработать.

В современных процессорах инструкции внутренне транслируются в "микрокоды", которые представляют собой еще более мелкие шаги, недоступные для программиста.


=== trans/manual_text_circular_dependency ===

$29050562435902*
Циклическая зависимость — это когда входные данные компонента изменяются в зависимости от его собственного выхода.

[center][img]res://dialogue/circular_dependency.png[/img][/center]

Этот симулятор не допускает циклических зависимостей и вместо этого вызывает ошибку.

Исключением являются оранжевые контакты, которые не влияют на выход в тот же такт. Поэтому они не могут вызывать циклические зависимости.

[center][img]res://dialogue/delay_line.png[/img][/center]


=== trans/panel_splitter16_output ===

$54658737170632*
Слово 1
Слово 2


=== trans/level_alu2_text ===

$58359423026017*
[right]Код
[color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход
[/right]


=== trans/level_turing_complete_description ===

$74859324795927* [center]Добавить условия к расчётам[/center]


=== trans/options_explicit_clock ===

$90384542658266* Явные часы


=== trans/level_nand_check ===

$61241226128494* Нет!
$32982011047799* Проверка


=== trans/level_complete_tooltip ===

$33922330743421*
[b]Wire color[/b]
[color=#cccccc][i]Организуйте провода с помощью цветов.[/i][/color]


=== trans/level_odd_number_RichTextLabel2 ===

$28592851869484*
[right][color=#e49f44]Вход 1
Вход 2
Вход 3
Вход 4[/color]
Желаемый выход
Текущий выход[/right]


=== dyn_lib/backend/board/prototype_list ===

$63739810313328* A
$64973155280765* Verilog вывод
$49276197821142* Вход
$29814732518166* Этот компонент бесполезен, если вы не добавите к нему выводы.
$82121899638400* Линия Задержки
$98425501753807* Слово 8
$73859686951415* Вход 2
$34544166306201* Вход
$35635980858172* Результат
$52765625016236* Проверить что один вход меньше чем другой
$26571699357356* Вывод одного бита.
$73552242026203* Значение
$78319747827404* Переключатель выхода.
$10003014068713* Выход
$57120551152029* Включено
$29354802063529* Вход 1
$58912167455465* И(AND)
$31119510732154* Создатель
$33973952772642* Сумматор
$13829181406158* Вход
$86007777261800 Регистр
$57559382166174* Суммирует 3 бита. Выводит сумму и перенос.
$47332177906638* Регистр
$55310910823919* Результат
$64834270613682* Слово 2
$99329533997829* Вход 2
$12465282633818* Значение клавиши
$90507478984775* Устр
$49628029628476* Сохранено (только с RAM с задержкой)
$30491931394044* Бит 3
$38043895181775* Делимое
$37820183531095* Вход 2
$11938328576163* Результат
$82520768681157* Значение 1
$88168295822085* Читать следующее
$34132199132916* Результат
$72196354295621* Результат
$56761198694928* Подходит для отображения чисел
$79069820293504* Адрес
$45759275278695* Слово 4
$41465347976002* Слово 3
$48399493738021* Загрузка
$38604301487974* Результат
$45194709458499* Сдвигает биты вправо, сохраняя знак числа.
$54645527447275* Слово 4
$68541722201520* Слово 2
$94688114733776* Бит 5
$25403981009644* Меньше < (знаковое)
$43625849577132* Слово 2
$56549841656852* Умножение
$96755142829250* Прокрутить влево
$90582128204153* 7 Сегментный Дисплей
$57515061804367* Бит 8
$18414950181373* Провод 1
$35668435514829* Проверяет если два входа равны
$42633414511976* Размер
$57781742628050* Легко задавайте значения или ширину для отдельных пользовательских компонентов
$71264799740288* Вход 2
$91351867388170* Результат
$72926911335769* И(AND)
$38405644304073* Сохр. значение
$78774996925434* UNIX время в микросекундах
$56099286786157* Слово 3
$53826250945595* Слово 3
$98495107507052* Проба памяти
$81945697622944* Результат
$54592399073683* Слово 7
$62365938365321* Вход
$90190739202646* Выход
$26316545288606* Логика
$10517158300617* Вкл. Вход
$74340334686746* Двубитный вход
$29277763516215* Слово 3
$70425218359878* Вход 2
$98447417990806* Сохраняет входные данные на 1 тик
$16637198920534* Бит 1
$59630801846451* Вход
$97957417956069* Бит 3
$56148744080822* Выходное слово, которое будет преобразовано в контакт ввода-вывода, если решение уровня сохранено как компонент.
$50524104374521* Разделитель
$15969687819995* Отображает значение на вашем пользовательском компоненте или в редакторе программы.
$23766521376720* Разделитель
$18837875001662* Объединяет четыре значения в одно значение.
$84124565448643* Добавляет настраиваемое количество задержки. Полезно для отладки задержки или контроля задержки оперативной памяти с задержкой.
$55492861320167* Соединяет четыре провода в один.
$43331778821779* Слово 4
$34834136969633* Результат
$46103423834548* Сдвигает значения в проводе на фиксированное количество без задержки или стоимости вентелей. Положительные значения сдвигают вправо, отрицательные - влево.
$61752209410617* Слово 1
$40231593934948* Считает количество нулей от наименее значимого разряда до первой единицы.
$10629272823895* Счет
$86440979564796* Добавляет дополнительный вывод загрузки к компоненту памяти.
$90729144645445* Смещение данных
$89334714444147* Адрес
$61034107377099* Арифметический сдвиг вправо
$10557704838301* Контакт выхода
$53272198916233* Вход 1 бит
$10081371413873* Регистр
$49218324472471* Счет замыкающих нулей
$48007194288764* Счётчик
$33298317818150* Сохранение включено
$82938882109013* Вход
$49187328896214* Вход на 4 бита
$85908922745328* Соединитель
$57244932190980* Делитель
$12046095993506* Вход
$14849689592952* Значение
$91417416554850* Компонент уровня
$72687047365426* Значение 0
$34517798310461* Побитово ИЛИ-НЕ(NOR) два значения
$38234795559189* Записать вход за 1 такт
$31261866779127* Низкая задержка, но требует несколько тактов чтобы завершить чтение или запись
$39369982838671* Равно
$12903183841172*
[ON] пока оба входа не [ON]
[table=5]
[cell]Вход 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Вход 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][ON][/cell][cell][ON][/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]
$55939572991140* Особенный
$57868504368581* Загрузить вход с уровня
$62021716182809* Умножает вход на -1
$79579388993928* Вход
$13236424504117* Слово 2
$23135722015590* Прокрутить на
$48196820862263* Сохранить
$80092537578053* Результат
$53104890311933* Бит 1
$36196769003341* Вход
$46674052164634* Вход 2
$99630419947500* 3-х контактный ИЛИ(OR)
$32869119410565* Сдвиг
$41329013865174* Результат
$60655485270988* Бит 2
$52247325526438* Счётчик
$57988237627670* Вывод
$31335506036805* Вход 1
$32353364840899* Verilog вывод
$35833633678405* Ширина
$61710093917097* ОЗУ
$63174121812559* Выход 3 бит
$69169839564869* Пробы(зонды)
$25937877347447* Переключается между четырьмя значениями
$32420839132846* Сохр. значение
$84237744302250* Слово 4
$71130919681688* НЕ-И(NAND)
$96269858195218* Выход
$12746117288689* Вход
$97862413256378* Слово 1
$82341255296823* Слово 1
$32778241216484* 1 Б
$49521764791439* Проба шины (бит)
$78001316449428* Адрес
$32175906806727* НЕ-ИЛИ(NOR)
$90844421681709*
Инвертирует вход
[table=3]
[cell]Вход[/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]
$97247779246257* ИЛИ(OR)
$46307028951926* Вход 1
$26294314784377* Статическая оценка
$92443053648819* Соединить 8 проводов в один.
$40770218762282* Вход 2
$51634467729625* Бит 4
$90918445419498* Результат
$97053062486634* Бит 4
$39068496076705* Слово 2
$40943344093513* Вход
$25360783001914* Слово 2
$98250587600120* 1 бит декодер
$72931148241340* Сдвиг вправо
$78365137610205* Слово 2
$12093087039542* Прокрутка вправо
$65417695246232* Разбить значение на два
$61115698874478* Слово 8
$92492235992906* Отображение значения на вашем пользовательском компоненте или в редакторе программ
$88009367936916* Вход 1
$98543949152559* Выход
$14357811157382* Стат. значение
$56223673009720* Модуль
$56684378975952* Пользов
$96874064281189* Вычисляет значение перед моделированием (оно становится константой во время моделирования).
$54650830853461* Размер бита
$93924984421856* Вход с пользовательским сообщением.
$60529708471093* Вход
$68645721548287* Проверяет меньше ли один сигнал другого
$11447837612693* Вход
$64456039381703* Инкремент
$91345730126879* Слово 4
$28430168550669* Результат
$68631919890554* Умножает два входа
$94201184715010* Вход 2
$95896157427528* ВКЛ
$73502755965496* Меньше < (беззнаковый)
$91132082500971* Результат
$61791273861597* Выход
$75410415450178* Объединяет четыре значения в одно
$13159020985209* Порт хранения
$63016103641149* Результат
$98429814030509* Суммирует два значения
$81293966912554* Результат
$49513138880387* Выход
$12723870092766* Разделитель
$57670626909848* 1 бит памяти
$92424468899005* Константное значение
$94079327237795* ИСК-ИЛИ-НЕ(XNOR)
$36604606953092* Трехбитный ввод
$26274172351943* Сохранить значение
$50624873506476* Побитовое переворачивание битов
$86856280609387*
[ON] когда входы различны
[table=5]
[cell]Вход 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Вход 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell][cell][OFF][/cell]
[/table]
$87814826739168* Входной контакт
$32390018918095* Бит 7
$14986322231964* Выводы
$28566798809283* Разделяет значение на два
$39229992367375* Слово 5
$46875362121056* Отображает значение на вашем пользовательском компоненте или в редакторе программ
$55527856774069* Бит 2
$46948613505134* Отображает значение на вашем пользовательском компоненте или в редакторе программы.
$13846578075327* Выведите значение на вашем пользовательском компоненте или в редакторе программы.
$62644592179746* Вход
$71449663590476* Увеличивает вход на 1
$79883191600386* Результат
$47407828844862* Линия Задержки
$82592072659210* Слово 1
$83375115196253* ИЛИ-НЕ(NOR)
$85468195875472* Вход
$88410639135888* Выход переноса
$75268915597774* Сдвиг влево
$38206009264853* Выводит то что получила на вход на предыдущем такте
$12972244522540* Экраны
$58538545767544* Результат
$83236921580268* Побитово XOR два значения
$90080083255838* Слово 3
$97908668221433* Слово 7
$38973389426963* Сохранить значение
$13031603864640* Адрес
$32678278048629* Регистр
$52602955212919* Создатель
$41342065742485* Вход слова
$53331432559892* Адрес
$19664974941910* 3-х контактный И(AND)
$87425893786880* Слово 6
$81271417735306* Компонент маленькой памяти
$26656763610465* Выходы
$29120200575252* Сдвиг на
$59129788113517* Переключается между восьмью значениями
$87181523471415* Загрузить
$90757852071445* Результат
$89864966939331* Вход, который будет преобразован в пользовательский вход, если решение сохранено в Фабрике Компонентов.
$11520072088720* Включить
$29112189486457* Слово 6
$69042749520784* Результат
$71521973612539* Результат
$50762061266647* Значение
$36178897760565* Слово 1
$84338437722935* Нажатие клавиши
$68060429242565* Результат
$15206117280094* Отобразите значение в вашем пользовательском компоненте или в редакторе программ
$45625973306519* Выход
$14896244080868* Вход 1
$84413061730805* Компонент бесполезен, если к нему не добавить выводы.
$84914933156268* Значение
$72329350771997* Провод 2
$70689623552857* Вход
$74944669923906* Бит 7
$95232070727738* Слово 1
$22051024347384* Выход слова, который будет преобразован в вывод IO, если уровень решения сохранен как компонент.
$73705122401876* Ожидание события
$30487770736917* Линия Задержки
$59421095581293* Конфигурация Линии Задержки
$60716205698752* Бит 5
$41057152094224* Размер
$21838813794006* Результат
$31440186157356* Вход
$62673774208656* Бит 1
$15091015683874* Выбор 0 / 1
$33191136165569* Вход
$10802217509530* Прокручивает биты входа направо
$72370556827575* Разделите значение на четыре
$54770992007366* Бит 6
$10611658692685* Переключатель
$60920459933396* Значение
$60499689720024* Значение
$79502835480664* Готовность загрузки
$87240636780043* Добавьте дополнительный вывод хранения к компоненту памяти.
$40965596602414* Клавиатура
$61791872137683* Побитовое И(AND) два значения
$35898724303882* Бит 3
$77767800149691* Вход 1
$19406015796751* Побитное ИЛИ(OR) двух 8 битных значений
$79796166910463* Verilog ввод
$66797889673362* Загрузить ввод с уровня
$25858905835416* 64 битная Константа
$37581447274882* Создатель слова
$19717901345023* Включение сохранения
$89748092068880* Результат
$73255344581755* Выход
$47293853955838* Бит 1
$57090003684860* Бит 4
$78558655732992* Постоянная память
$29209724501083* Бит 2
$86810631435170* Вход
$99209488297941* Автоматически изменяемая версия конфигурации регистра
$21904470559153* Разделитель байта
$76450922709110* Результат
$98747779812970* Соединитель байта
$87897455882076* Слово 1
$29903955254861* Результат
$70781578424003* Контакт вывода
$31019209691112* Результат
$31166764805982* Включить
$97891171189933* Вход
$86839706221116* 3-х контактный И(AND) элемент
$69394421220436* Сдвиг битов ввода вправо
$27764401720104* Перезаписать значение
$69779691531031* Слово 5
$14935676453720* Включить
$16586008078175* Программы
$38100827224098* Вход
$54832952840086* ИСК-ИЛИ(XOR)
$48865460617183* Считать нули от самого значимого разряда до первой единицы.
$76766452660421* Записывает нажатия клавиш с физической клавиатуры
$80762093809413* Бит 1
$18563543025377* Значение
$21727998752868* 2 битовый декодер
$81929942356043* Выключаемый Выход
$23521735131997* Повернуть на
$25962339721851* Вход 2
$73138546420646* Бит 6
$85762072154176* Значение
$77192199509688* Статическое значение
$12896765714603* Перенос
$32087865653212* ИСК-ИЛИ-ИНВ(XNOR)
$39719622211817* Вход 1
$91320392055125* Вход
$55557725551789* Прокручивает биты входа налево
$14531866237078* Объединяет два значения в одно
$74812135740513* Создатель слова
$15744234453408* Слово 3
$66120663256468* Слово 4
$66900787805858* Слово
$36974631589430* Соединитель
$40378649521457* Линия задержки
$63259215761047* Используется для создания уровней карт
$38230227800882* Однобитный выход, который будет преобразован в выход ввода-вывода, если решение уровня сохранено как компонент
$78616473760551* 1 битная память
$22719674432950*
[ON] Когда два входа [ON]
[table=5]
[cell]Вход 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Вход 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell]
[/table]
$81297026031742* Бит 2
$27510848535619*
[ON] Когда никакой из входов [ON]
[table=5]
[cell]Вход 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Вход 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][ON][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][OFF][/cell]
[/table]
$16563671560208* Разделитель
$53626071753348* Выход
$83785013786825* Результат
$59403575811053* Результат
$94527438551030* Вход
$64408471620057* Verilog вход
$17864898529357* Результат
$35845204308823* Объединяет восемь значений в одно.
$39047791955795* Трехбитный вывод
$65810655233287* Сохранить значение
$28160228892566* Ввод-вывод
$45052907788964* Компонент трёхбитного входа
$19275565166747* Бит 4
$46261916666444* Результат
$12478474747295* Результат
$77979647868788* Выход
$21312161634667* Вход 1
$10776829749898* Сдвиг значений на проводе на фиксированную величину без задержки или затрат на вход.
$10815269647822* Выход переноса
$50269927015049* Результат
$62318534735397* Пробник памяти (бит)
$94375716460090* 3 Битный декодер
$98189541430996* Результат
$12371272172145* Слово 1
$60783191695982* Выход
$25228522216068* Разбивает значение на восемь частей
$41678932883790* Считать ведущие нули
$74338505460996* Собирает 8 бит в байт
$32806857886815* Бит 2
$66743357915699* Консоль
$60488114435022* Разбивает байт на 8 бит
$13013154620359*
[ON] когда хоть один из входов [ON]
[table=5]
[cell]Вход 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Вход 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell][cell][ON][/cell]
[/table]
$35566912320742* Слово 1
$38582632801055* Сохранить
$76559516323162* Результат
$31412778600732* Конфигурация задержки
$58747558269936* Слово 7
$67053670145576* ИЛИ(OR)
$99903808503639* Слово 1
$53378739117488* Слово 6
$46806711173957* Результат
$27209292843194* Результат
$44867305035474* Проба(зонд) памяти
$64283193060770* ОЗУ
$41497058117358* Осталось тактов занятости
$56380665909610* Перезаписать
$58599325743999* Результат
$96773243310913* Отключить
$57744526831576* Включение сохранения
$28437214963047* Бит 7
$14289230364154* Результат
$47758165407719* Результат
$67742753106024* Слово 3
$71278573510238* Переключаемый вход
$62736827510023* Увеличивается каждый тик, если не переписан
$23666042416530* Бит 2
$31548514728473* Бит 8
$31352468367638* Делимое
$39740232065347* Слово 8
$50078663735607* Входы
$96428357982878* Разделяет значение на четыре
$73351141217116* Вход
$56917313833836* Переключить бит
$81286216680410* НЕ(NOT)
$32616927929524* Слово 3
$24996093464154* Вход с текстом, который может быть установлен динамически с помощью сценария уровня.
$13271299225650* Размер
$52408847893200* Сдвиг на
$95432695156488* Вход 2
$28309404947909* Специальный
$56836285506470* Легко устанавливает значения или ширину на отдельных пользовательских компонентах.
$12242923444593* Выход
$60495775939951* ВВ
$49451948914812* Матем
$34852108377004* Слово 2
$39579585753615* Вход 1
$90026011029075* Сумма
$56843812162355* ИСКЛ-ИЛИ(XOR)
$41625195403324* Выход
$80335381544532* Сдвиг на
$77669928463861* Полный сумматор
$92060097589370* Вход
$61637742665554* Вход
$45789912406647* Побитово XNOR два значения
$66482114876737* Сдвигает биты входных данных влево
$90490391067117* Песочница только
$72749460799924* Всегда [OFF]
$62990744955549* Останавливает выполнение с помощью пользовательского сообщения
$50859914201083* Побитовое НЕ-И(NAND) двух значений
$98915183771510* Включение сохранения
$17576327690867* 3-х контактный ИЛИ(OR) элемент
$42849468178655* Значение
$59041825668970* Бит 8
$30351143139905* Остановить
$86870364449392* Вход
$55043182538767* Вход
$43576980017857* Компонент маленькой памяти
$17802619460312* Вход переноса
$21366501215506* Слово 2
$71439983611832* Результат
$96011300295966* Время
$36821978571043* 1 бит памяти
$74156976676497* Мульти-тактовое ОЗУ
$24840584785792* Записать входное значение на 1 тик
$54427436420428* Проба(зонд)
$54875690243444* Вывод на два байта.
$90688845521356* Бит 1
$54485213322089* Verilog
$67495243848605* Соединитель
$21977039914327* Вход 2
$68208851966397* Бит 3
$96212935718484* Всегда [ON]
$26685462633615* Переключение между двумя выводами
$27908666907710* Сохранить значение
$38342586404936* Вывод на 1 бит
$25103579211328* Проба памяти (бит) 
$39579002124406* Слово 4
$51300749636961* Вывод
$98308856504509* Вывод на 4 бита
$27554463550295* SSD
$38480011054605* Вход переноса
$52465938629713* Вход
$40111764008386* Слово 2
$64422565604875* Разделитель
$66118461327893* Вход 1
$28970466583796* Слово 2
$53510688527850* Слово 1
$79940151247348* Включение сохранения
$87163920171569* Бит 6
$42640455414496* Сохраняет вход на 1 такт
$91048127331082* Объединяет два значения в одно
$43917122084061* Принимает вывод для уровня
$18510923212418* Наносекунды с 1 января 1970 года
$49251828025705* Поделить 2 числа
$94686892562446* Память
$98149321315676* Вход 1
$14913258317738* Слово 2
$74353371237182* Смещение данных
$67089816656649* Результат
$44959426271423* Деление
$37664445405251* Бит 5
$88379907297327* Отрицание
$85988469904002* Вход
$26124683995752* B
$52237769558587* Значение
$80934212906097* Модуль 2 чисел
$22384635971036* Слово 5
$56105779236896* Значение
$87345192339084* Переключает значение
$89804933576629* Статический сдвиг
$40289043699917* Настраиваемый статический индексатор
$44889574903079* Результат
$15693531522415* Слово 4
$16105755937680* экран 80x24 текстовых символов
$99974317694842* 160x120 пиксельный экран
$56380513614754* Порт загрузки
$22262460678043* Результат
$20755367544042* Вход
$11168613697835* Переключает между двумя значениями
$92046117430308* Пиксельный экран
$34453052824732* НЕ(NOT)
$25024221028085* Результат
$61860786587357* ВЫКЛ
$11349557191063* Вход
$83263310288543* Ввод бита
$31578787451669* Вход 1
$96610055905190* Создать слово
$90614106399129*
[ON] когда входы одинаковые
[table=5]
[cell]Вход 1[/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell][cell][ON][/cell]
[cell]Вход 2[/cell][cell][OFF][/cell][cell][ON][/cell][cell][OFF][/cell][cell][ON][/cell]
[cell]Выход[/cell][cell][ON][/cell][cell][OFF][/cell][cell][OFF][/cell][cell][ON][/cell]
[/table]
$41574334638147* Переключатель
$47630501850089* Конфигурация регистра
$84097868331514* Готовность загрузки (только для ОЗУ с задержкой)
$35422378975821* Мультиплексор
$21611913368782* Делитель
$36744990871521* Ур.
$38008204445107* Разделитель
$42003550578685* Адрес
$57989404583269* НЕ-И(NAND)
$45180518672023* Расширенная версия "статического индексатора". Сдвиг и размер вывода выводятся из размера проводов, подключенных к входным контактам.
$62784430582183* Включить
$72955769263032* Вход
$78592599175225* Сохранить значение
$52550214308917* Значение


=== levels/push_pop ===

$10062117579269* Добавьте стек к вашему компьютеру
$18561605111721* ТОЛКАТЬ(PUSH) {input} в стек
$59658696292688* ТЯНУТЬ(POP) {value} из стека


=== trans/level_complete_robot ===

$73150174144736*
[b]Роботрон 9000+[/b]
[color=#cccccc][i]Control [color=#e49f44]Роботрон 9000+[/color] использует ваш компьютер[/i][/color]


=== component_panels/ccinput_label ===

$12108679067803* Метка


=== trans/panel_matrix_column_major ===

$90704227545058* Основные пиксели столбца


=== trans/panel_counter16_input ===

$34787724343200* [right]Переписать значение[/right]


=== trans/panel_not ===

$33240384048149*
[right]Вход 
Выход[/right]


=== trans/panel_matrix_color ===

$78812572100236* [center]Пискели / Сбросить[/center]


=== misc/bit_size ===

$68617247634978* Битовый размер(правая кнопка: изменить размер)


=== main_scripts/functions ===

$11467644007149* Счётчик {nr}
$41936481068702* Счётчик
$11980538317261* Память
$10533010562232* ОЧКИ ЗАДЕРЖКИ: {delay}
$10098517717617* Тест: {nr} / {total}
$87591753278764* {nr} Рег

#  Right hand side menu
$29169064199243* Выход {nr}
$32508339206292* ОЧКИ ВЕНТИЛЕЙ: {gate}
$42012207828907* Регистр
$97889215332379* {nr} Памяти


=== ui/global_translations ===

$53021804895845* ANDi
$69956969985790* ORi

#  Instead of writing 5839000, the number turns into 5.8M
$22896492410578* M
$11144256835662* XORi

#  4 letters max
$61412773713567* SUB
$85913831661289* IF_LESS
$52344899983501* IF_LESS_OR_EQUAL
$89945092889418* SUBi

#  4 letters max
$89011349770597* NOT
$71559031724238* IF_NOT_EQUAL
$29718660090112* Неправильный ответ.

#  4 letters max
$40520283279584* XOR
$71204580217527* NOTi
$71195301111400* ADDi
$98178474649432* IF_GREATER_OR_EQUAL
$68187490877029* IF_EQUAL

#  4 letters max
$44009845985661* ADD

#  4 letters max
$68666991962246* ИЛИ
$44906330481241* Задержка
$30602804398798* Элементы
$45532697833519* Вы добрались до уровня {level}!

#  4 letters max
$33873219185286* И-НЕ
$79492115258673* IF_GREATER

#  Instead of writing 5839, the number turns into 5.8K
$84696693690500* K

#  4 letters max
$64519909700148* И
$76763908762578* Такт

#  4 letters max
$36090730285143* ~ИЛИ
$37093663674348* Уровень {x}

#  Instead of writing 5839000000, the number turns into 5.8B
$71072134093858* B


=== ui/toggles/level_log2 ===

$91515053618360* Справочник


=== misc/view_solution_button ===

$59351520832720* Да


=== trans/panel_decoder2_description ===

$29468245669811* [center]Включает 1 из выходов в зависимости от входа[/center]


=== trans/binary_racer_count_down2 ===

$23959994711260* Готовы к гонке?


=== trans/level_capitalize_input ===

$23002150617591* Вход 


=== trans/panel_mul_output ===

$14856735970704* Результат


=== trans/delay_score ===

$29032982097458* СЧЕТ ЗАДЕРЖКИ:


=== trans/schematics_menu_visible_label ===

$34084132835354* Показывать в меню


=== trans/level_division_headers2 ===

$43313037226215* Остаток


=== trans/panels_config_delay_delay ===

$52499013005170* [right]Задержка[/right]


=== trans/levels_any_doubles_RichTextLabel2 ===

$60287131882436*
[right]Вход 1
Вход 2
Вход 3
Вход 4[color=#e49f44]
Желаемый выход
Текущий выход[/color][/right]


=== trans/panel_input_input_2 ===

$13656747150138* Вход 3


=== trans/map_complete ===

$81337533438394* Завершено


=== trans/level_alu1_text ===

$53254733455389*
[right]Код
[color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход
[/right]


=== misc/add_assembly ===

$66747898777348* Добавить


=== trans/level_nand_1 ===

$71204033550134* Что делает И-НЕ(NAND) элемент?


=== trans/overwrite_button ===

$11839708860574* Переписать


=== misc/rom_file_select_button ===

$46471024006274* Установить файл по умолчанию


=== trans/manual_text_program ===

$25326551844839*
Компонент программы представляет собой компонент памяти только для чтения, данные которого можно программировать на ассемблере. Чтобы отредактировать ассемблер, нажмите на желтую иконку редактирования в углу компонента.

[center][img]dialogue/manual/program_edit.png[/img][/center]

В центре экрана вы увидите область кода, подробнее об ассемблере [color=#4d82c5][url=Assembly]читайте здесь[/url][/color].

Слева от интерфейса редактора ассемблера вы можете добавлять ассемблерные коды (мнемоники). Ассемблерные коды служат заменой числам, так что вместо того, чтобы запоминать, какое число представляет инструкцию И(AND) в вашей архитектуре, вы можете добавить "AND" в ваши ассемблерные коды, что делает код более читаемым и удобным для написания.

[center][img]dialogue/manual/assembly_codes.png[/img][/center]

На компоненте программы вы также найдете кнопку "Наблюдать состояние".

[center][img]dialogue/manual/watch_state.png[/img][/center]

Эта кнопка может быть использована для подключения редактора ассемблера к регистрам, счетчикам или пробам(зондам). Таким образом, состояние вашей архитектуры можно будет проверять во время написания кода, не закрывая редактор.


=== trans/options_cut ===

$88238310953306* Вырезать


=== trans/panel_network_next_event ===

$80836714383432* Следующий [color=#39aa49]Тип события[/color]


=== trans/manual_text_top_truth ===

$83283949590490* И(AND)


=== trans/panel_fileloader_description ===

$72892007399429*
Файл rom выводит содержимое файла по 8 байт за раз.

Самый высокий 64-битный адрес (0xFFFFFFFFFFFFFFFF) является специальным и выводит длину файла в байтах.


=== levels/mod_4 ===

$19351773688761* Тактов осталось: {ticks_left}  Вход: {input}
$16810715868480* Посчитайте вход по модулю 4


=== trans/and_gate_RichTextLabel2 ===

$98472849629373*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== trans/level_byte_equal_description ===

$38686097566531* [center]Проверить одинаковы ли байты[/center]


=== trans/panel_input_left ===

$91063734228931* Влево


=== trans/options_undo ===

$58334563411624* Отменить


=== component_panels/counter_input2 ===

$83053034878927* [right]Увеличить / Переписать[/right]


=== dialogue/options/right_to_left ===

$91820399667693* Адресация справа налево


=== trans/level_complete_manual_page ===

$39011561067359* [b]Документация[/b]


=== trans/panel_sound_command ===

$66510191984141* Команда


=== misc/factory ===

$53123649343022* Фабрика компонентов


=== trans/manual_network ===

$67416967652082* Сеть


=== trans/tps_label ===


# [color=#cccccc][i]RTFM[/i][/color]Entry: [color=#68d277]Architectural complexity[/color]
$74564675939961* Скор.сим:


=== trans/manual_ram ===

$61854681801183* ОЗУ


=== trans/levels_computing_input ===

$23173159754705*
Инструкция
Вход 


=== trans/ticks_sec ===

$16026817441460* такт/сек


=== trans/manual_header ===

$10757271456963* Документация


=== misc/opcode_name ===

$15090156481094* Имя


=== trans/level_complete_stat_level ===

$92313038380926* Уровень


=== component_panels/SpriteDisplay ===

$94199633210330* Ничего


=== ui/top_bar/gate_score ===

$16224450605442* NAND ОЧКИ:


=== trans/xor_gate_RichTextLabel2 ===

$21417732641222*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== trans/panel_shr_output ===

$53187359961794* Выход


=== trans/share_prompt_label ===

$61304386273201*
Имя
Описание


=== trans/panels_sound_description ===

$65379881141228*
[b][color=#e49f44]Тип команды[/color][/b]
[code]0[/code] Нет запроса
[code]1[/code] [color=#e49f44]Играть[/color]
[code]2[/code] [color=#e49f44]Сбросить и играть[/color]
[code]3[/code] [color=#e49f44]Стоп[/color]


=== trans/panel_or_output ===

$68791649314727* Результат


=== misc/level_gate_unlocks_unknown ===


#  This is a tooltip for levels on the level map, before something has been unlocked.
$76731326010721* Разблокировалось что-то неизвестное


=== misc/score_sync ===

$76911045833478* Синхронизация Счёта


=== trans/map_cpu_architecture ===

$95559333192525* АРХИТЕКТУРА ЦПУ


=== trans/panel_input_up ===

$97169317610794* Вверх 


=== trans/delete_confirm ===

$57294448765637*
Вы уверены, что хотите
удалить эту схему?
$74657548486940* Да


=== levels/saving_gracefully ===

$14295883660596* ЗНАЧЕНИЕ
$14950983012226* СОХРАНИТЬ
$14837033157870* ДЕЙСТВИЕ
$13045361823397* НЕ СОХРАНЯТЬ


=== ui/files_export_description ===

$78500352397752*
[b]Экспорт значений[/b]

 Формат:

 Файл сборки:

 Оптимизация:

 Путь вывода:


=== trans/levels_bytw_or_text ===

$21877344150481*
[right]
[color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход
[/right]


=== trans/rpg_hats_exit ===

$71200030457801* Выход


=== dialogue/isa_overview/no_fields_yet ===

$87369452584992* Пока нет полей


=== buttons/prev ===

$47100015569144* Предыдущий


=== ui/file_export_button ===

$35572795990520* Экспорт


=== trans/level_flood_predictor_description ===

$24034386495895* Найдите лучше место для Пиратского Падения


=== main_scripts/dialogue ===


# If you just finished the OVERTURE computer and see something weird, odds are you may have changed the definitions.Each row has a label and 8 bits you can set to either[img]dialogue/on.png[/img], [img]dialogue/off.png[/img] or [img]dialogue/any.png[/img] (wildcard). When using the instruction panel, if the bitpattern matches a row, the label will be shown.
$95287273202819* СОХРАНИТЬ

#  hint for odd number
$68750974209145* Вы можете выяснить, имеют ли 2 входа нечетное количество [ON], используя всего лишь 1 компонент...

#  hint for the bus
$50799425816171* Используйте переключатели, чтобы подключить входы к одному проводу.

#  Hint for the maze
$36837749971886*
Всегда идите по левой (или правой) стороне лабиринта, и вы обязательно доберетесь до выхода.

Псевдокод такого алгоритма выглядит так:
 Шаг вперёд
 Повернуть налево
 Поворачивать направо пока перед вами стена
 Нажимать Действие после каждого поворота (в случае если выход впереди)
 Повторить

#  Hint for byte adder
$37093555217568* Вам нужно всего лишь 8 полных сумматоров.

#  Hint for the alias level
$30711878307572* Регистр rz всегда равен 0.
$64510812504271* Некоторые из используемых компонентов не должны быть доступны в этом уровне!

#  hint for counting signals
$21044442262778* Схема для бита 1 такая же, как та, что вы сделали на уровне "Нечетное количество сигналов". Схема для бита 2 такая же, как в "Двойной проблеме", за исключением случая, когда все 4 включены.

#  hint for saving gracefully
$25321701584378*
В этом уровне вам нужно использовать одну Линию Задержки. Создайте таблицу истинности для того, что должно поступать в Линию Задержки. Рассматривайте вход в Линию Задержки как выход для вашей таблицы.

Входами являются 2 входа И(AND) выхода Линии Задержки, так как выход Линии Задержки играет роль входа. В общей сложности у вас есть 3 "входа", что дает вам 8 комбинаций. Как только у вас будет задача в виде таблицы, решить её станет намного проще.
$12671132029272* Ваша схема была сохранена в Фабрике Компонентов.
$43114846393781* ЗАГРУЗИТЬ
$65118645692603* ИНСТРУКЦИЯ

#  Hint for the one hot level
$62372300913166* Один из компонентов, который вам нужен, это сдвиг(shift).
$53308028631558* инструкции

#  Hint for masking time
$46866534894828*
В двоичной системе, взятие остатка от деления числа на 4 эквивалентно использованию только двух младших битов. Это связано с тем, что старшие биты представлены как 4, 8, 16 и так далее, и все они делятся на 4 без остатка.
Это верно в общем случае для остатка от деления на степень 2: младший бит числа представляет это число по модулю 2 (четное или нечетное), три младших бита — по модулю 8 и так далее.

Аналогично, в десятичной системе остаток от деления 4321 на 100 также прост (ответ — 21, старшие цифры игнорируются), потому что 100 является степенью 10.

Теперь вам просто нужно выяснить, как получить последние 2 цифры числа.
$52150443679969* Продолжить

#  hint for less
$56438995128380*
Сначала определите, какие биты различаются между двумя байтами. Это можно сделать с помощью операции ИСКЛ-ИЛИ(XOR) для байтов (помните, что XOR становится [ON] при различных входах). Мы знаем, что число с самым высоким различающимся битом [ON] является бОльшим числом. Но мы должны учитывать только
самый высокий различающийся бит, поэтому для каждого бита используйте цепочку логических ИЛИ(OR), чтобы проверить, есть ли какие-либо более высокие биты в [ON].

Наконец, последний бит рассматривается отдельно для знаковых чисел, здесь он имеет противоположный эффект (если только одно число имеет его [ON], это число гарантированно меньше).
$89787506720574* Закрыть
$66207112287034* ЗАМЕТКА


=== trans/instructions_the_robot ===

$26358418182667*
[color=#e49f44]0[/color] Повернуть влево
[color=#e49f44]1[/color] Идти вперёд
[color=#e49f44]2[/color] Повернуть вправо
[color=#e49f44]3[/color] Отдыхать
[color=#e49f44]4[/color] Использовать [color=#a9a9a9](enter)[/color]
[color=#e49f44]5[/color] Стрелять лазером [color=#a9a9a9](tab)[/color]


=== trans/manual_Cyclic recipes ===

$45682345144408* Циклические схемы


=== trans/panel_divmod_output ===

$46851399092683* Результат


=== trans/nor_gate_RichTextLabel2 ===

$52955821161579*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход[/right]


=== trans/options_ui_scale ===

$78210579950439* Масштаб интерфейса


=== component_panels/splitter4_output ===

$83254846909698*
Слово 1
Слово 2
Слово 3
Слово 4


=== trans/manual_text_edit_instructions ===

$75786562031150*
После завершения уровня "Полнота по Тьюрингу" панель инструкций позволяет вам вручную редактировать инструкции. Это полезно, если вы хотите создавать свои собственные компьютеры.

Если вы только что завершили компьютер OVERTURE и видите что-то странное, скорее всего, вы изменили определения.

Каждая строка имеет метку и 8 бит, которые вы можете установить на [img]dialogue/on.png[/img], [img]dialogue/off.png[/img] или [img]dialogue/any.png[/img] (любой). Если битовый шаблон совпадает со строкой в панели инструкций, там будет отображаться метка.


=== trans/level_unseen_fruit_description ===

$96313037592447* [center]Используйте робота для сканирования фруктов.[/center]


=== trans/panel_add_input ===

$43784903785964*
[right]Переполнение вх.
Вход 0
Вход 1[/right]


=== trans/odd_number_error ===

$61530231182650* Используется слишком много компонент


=== trans/panel_mux_description ===

$30551449512908* [center]Выбрать вход 0 или 1[/center]


=== trans/panel_keyboard_character_mode ===

$98676883649624* [right]Буквенный режим[/right]


=== trans/options_code_font_size ===

$98135524286922* Размер шрифта для кода


=== trans/rpg_complete_derpootext6 ===

$29750433345543* [center]Как бы ты мог?[/center]


=== trans/ide_assembly_codes ===

$56309878239731* Инструкции


=== trans/panel_less_u_output ===

$19353239892904* Выход


=== trans/options_general_title ===

$21908594290225* Общее


=== levels/binary_start ===

$19099025738142* Старт


=== trans/panel_sum_output_0 ===

$54481599074471* Сумма


=== trans/panel_screen_description ===

$31014036880257* На экране показываются визуальные эффекты уровней основной кампании.


=== schematics_hub/accept_license ===

$72317516399185* Согласие использовать [color=#dd6576][url=cc0]CC0[/url][/color] лицензию


=== ui/file_export ===

$80702678699819* Экспорт


=== dyn_lib/backend/utilities ===

$60522915479032* Выход {nr}
$13327741293223* Вход {nr}


=== misc/level_close ===

$79455494572697* Продолжить


=== dialogue/goto ===

$34620369277151* Перейти к смещению:


=== trans/panel_counter8_output ===

$35643379690712* Выход


=== trans/level_byte_xor_text ===

$15756501406553*
[right]
[color=#e49f44]Вход 1
Вход 2[/color]
Желаемый выход
Текущий выход
[/right]


=== trans/dual_ram_output ===

$23716875158240*
Выход 1
Выход 2


=== component_panels/enable_assembler2 ===

$47799164020664* [right]Начальные данные:[/right]


=== trans/manual_text_network ===

$70445160410129*
[b]Обзор[/b]

Компонент "Сеть" предоставляет вам низкоуровневый доступ к сетевым функциям. Вы управляете своей сетью, отправляя компоненту [color=#e49f44]Команды[/color], и когда [color=#39aa49]События[/color] возвращаются из сети, они помещаются в очередь, и вы обрабатываете их по одному. Для отслеживания различных одновременных соединений используются [color=#dd6576]ID соединений[/color].

Вот типы команд, которые вы можете отправить компоненту, и их аргументы:
[code]0[/code] Нет комманды
[code]1[/code] [color=#e49f44]Слушать[/color] ([color=#dd6576]Порт[/color])
[code]2[/code] [color=#e49f44]Подключится[/color] ([color=#dd6576]IP[/color], [color=#dd6576]Порт[/color])
[code]3[/code] [color=#e49f44]Отправить данные[/color] ([color=#dd6576]ID подключения[/color], [color=#dd6576]Данные[/color], [color=#dd6576]Длина данных[/color])
[code]4[/code] [color=#e49f44]Закрыть[/color] ([color=#dd6576]ID подключения[/color])
[code]5[/code] [color=#e49f44]Читать следующее событие[/color]
[i]Смотрите панель компонента, чтобы узнать, какой вывод соответствует какому аргументу[/i]

Типы команд [color=#e49f44]Слушать[/color] и [color=#e49f44]Подключение[/color] выводят [color=#dd6576]ID соединения[/color] для нового соединения.

Чтобы 2 программы могли [color=#e49f44]Отправить данные[/color] друг другу, одна программа должна сначала [color=#e49f44]Слушать[/color] (называемая сервером) на [color=#dd6576]Порту[/color], а другая затем должна [color=#e49f44]Подключиться[/color] (называемая клиентом), используя [color=#dd6576]IP[/color] прослушивающей программы и [color=#dd6576]Порт[/color], который она выбрала. После установления соединения сервер и клиент функционируют абсолютно одинаково.

Обратите внимание, что [color=#dd6576]IP[/color] — это 32-битное число, обычно записываемое как 4 байта с точками между ними (например: 127.0.0.1). В этом симуляторе вы меняете порядок байтов, так что 127.0.0.1 становится 0x0100007F. 0x0100007F всегда является адресом петли вашего компьютера, и вы можете использовать его для подключения программ, работающих на одном компьютере.

Вы можете обнаружить, когда происходят события в сети, проверяя вывод "Тип следующего события". Вот типы событий:
[code]0[/code] Нет событий
[code]1[/code] [color=#39aa49]Входящее соединение[/color] ([color=#dd6576]ID соединения[/color], [color=#dd6576]Port[/color])
[code]2[/code] [color=#39aa49]Связь завершена[/color]
[code]3[/code] [color=#39aa49]Полученные данные[/color] ([color=#dd6576]ID соединения, Данные[/color], [color=#dd6576]Количество данных[/color])
[code]4[/code] [color=#39aa49]Соединение закрыто[/color] ([color=#dd6576]ID соединения[/color] / [color=#dd6576]Код ошибки[/color])

[color=#39aa49]Входящее соединение[/color] происходит только после [color=#e49f44]Слушать[/color]. Используйте [color=#dd6576]Порт[/color], чтобы различать прослушивателей (нельзя одновременно прослушивать один и тот же порт дважды).

[color=#39aa49]Подключение завершено[/color] происходит только после [color=#e49f44]Подключения[/color], дождитесь этого, прежде чем начинать отправлять данные.

Вы можете отправлять или получать от 1 до 8 байт данных за раз, используйте [color=#dd6576]Длину данных[/color], чтобы определить размер.

Соединение может быть либо "возможно открытым", либо "закрытым". Нет возможности узнать, действительно ли соединение открыто, кроме как отправив данные. Основные сетевые протоколы были разработаны таким образом для надежности и скорости, это не ограничение симулятора.

Если вы получите [color=#dd6576]ID соединения[/color] -1, это означает, что произошла ошибка подключения.


=== component_panels/file_loader/file_length ===

$19456213390070* Длина файла


=== trans/panel_xnor ===

$84353654486355*
[right]Вход 0
Вход 1
Выход[/right]


=== dialogue/asm_browser/new_file_name ===

$28072577964570* Новый .asm файл


=== ui/toggles/negative_numbers ===

$50924073287410* Переключить формат чисел


=== component_panels/NoteSound ===

$77965930443088* Свой
$13027096115070* Стандартный
$22175469402467* Никакой


=== component_panels/select_file ===

$61152934389120* Выбор файла


=== trans/levels_description ===

$33755630709299* Победите NAK 02, чтобы спасти мир


=== trans/manual_edit_instructions ===

$86365051641280* Исправить инструкцию


=== misc/factory_back_inner ===

$12211557416281* Назад


=== levels/conditions ===

$16407231803964* Если ЗНАЧЕНИЕ < 0 вывести [img]dialogue/on.png[/img]
$16742265812068* Независимо от ЗНАЧЕНИЯ выведите [img]dialogue/on.png[/img]
$17616699231679* Если ЗНАЧЕНИЕ > 0 вывести [img]dialogue/on.png[/img]
$16632557438774* Если ЗНАЧЕНИЕ ≠ 0 вывести [img]dialogue/on.png[/img]
$18234235689107* Если ЗНАЧЕНИЕ ≥ 0 вывести [img]dialogue/on.png[/img]
$12429396872036* Независимо от ЗНАЧЕНИЯ вывести [img]dialogue/off.png[/img]
$13680487623452* Если ЗНАЧЕНИЕ ≤ 0 вывести [img]dialogue/on.png[/img]
$19014698800906* Если ЗНАЧЕНИЕ = 0 вывести [img]dialogue/on.png[/img]


=== component_panels/LevelInputWordz ===

$28875029242318* Не включено


=== trans/panel_index_bit_input ===

$47911988603136* [right]Вход [/right]


=== trans/panel_rom_inputs ===

$52400325164412*
[right]Загр
[i][color=#aaaaaa](Песочница только)[/color][/i] Сохр
Адрес
Значение[/right]


=== component_panels/shift_by ===

$73488674510375* Сдвиг на


=== trans/manual_instructions ===

$90323246286028* Инструкции


=== trans/panel_neg_description ===

$64810753197096* [center]Отрицательное число[/center]


=== trans/level_ram_component_RichTextLabel2 ===

$92123299522120* [center]Ожидаемые состояния[/center]


=== trans/schematics_description ===

$95386916091656* Описание


=== trans/nand_Label ===

$11482037025960*
Вход 1


Вход 2


=== trans/options_working ===


#  Upload in progress for score sync
$18749833316380* Работаем


=== trans/level_turing_complete_text ===

$83740652063566*
Инструкция
Вход 


=== trans/manual_text_rgb ===

$52915933943906*
Этот симулятор использует 3-байтовые RGB-цвета для некоторых компонентов. Каждый цвет представлен 1 байтом, значение байта определяет интенсивность каждого цвета:
[color=#e3243f]RRRRRRRR[/color][color=#55ff55]GGGGGGGG[/color][color=#3333ff]BBBBBBBB[/color]


=== trans/map_working_computer ===

$38843517090942* РАБОТАЮЩИЙ КОМПЬЮТЕР


=== trans/complete_unlocks ===

$45250062735373* Разблокировано


=== trans/panel_decoder1_output ===

$29665974488253*
Выход 1
Выход 2


=== trans/view_solution_text ===

$83652444593618* Вы хотите посмотреть решение этого уровня?


=== misc/add_bottom ===

$86446054110623* Добавить


=== trans/schematic_new_file_name ===

$24424463568668* Новая схема


=== trans/options_resubmit ===


#  Seen after having uploaded a schematic to the hub and then changing the schematic
$13328644005279* Отправить повторно


=== component_panels/inc_input ===

$19827113145688* [right]Вход[/right]


=== trans/instructions_header2 ===

$14831276667273* [center]Инструкции[/center]


=== trans/negative_numbers ===

$57872971841486* Отрицательные числа


=== trans/level_bit_adder_RichTextLabel2 ===

$79624864981341*
[right][color=#e49f44]Вход 1
Вход 2[/color]
Желаемая Сумма
Желаемый Перенос
Текущая Сумма
Текущий Перенос[/right]

=== trans/panel_bitmemory_inputs ===

$47585933412781
[right]Сохранение разрешено

Сохраняемое значение[/right]


